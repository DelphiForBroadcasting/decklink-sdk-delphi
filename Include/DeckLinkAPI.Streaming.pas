(* -LICENSE-START-
** Copyright (c) 2016 Blackmagic Design
**
** Permission is hereby granted; free of charge; to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use; reproduce; display; distribute;
** execute; and transmit the Software; and to prepare derivative works of the
** Software; and to permit third-parties to whom the Software is furnished to
** do so; all subject to the following:
** 
** The copyright notices in the Software and this entire statement; including
** the above license grant; this restriction and the following disclaimer;
** must be included in all copies of the Software; in whole or in part; and
** all derivative works of the Software; unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS"; WITHOUT WARRANTY OF ANY KIND; EXPRESS OR
** IMPLIED; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY;
** FITNESS FOR A PARTICULAR PURPOSE; TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY; WHETHER IN CONTRACT; TORT OR OTHERWISE;
** ARISING FROM; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*)

unit DeckLinkAPI.Streaming;

{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses
  System.SysUtils, System.Variants, Winapi.ActiveX,
  DeckLinkAPI.Discovery, DeckLinkAPI.Modes;

const
  IID_IBMDStreamingDeviceNotificationCallback: TGUID = '{F9531D64-3305-4B29-A387-7F74BB0D0E84}';
  IID_IBMDStreamingH264InputCallback: TGUID = '{823C475F-55AE-46F9-890C-537CC5CEDCCA}';
  IID_IBMDStreamingH264NALPacket: TGUID = '{E260E955-14BE-4395-9775-9F02CC0A9D89}';
  IID_IBMDStreamingAudioPacket: TGUID = '{D9EB5902-1AD2-43F4-9E2C-3CFA50B5EE19}';
  IID_IBMDStreamingMPEG2TSPacket: TGUID = '{91810D1C-4FB3-4AAA-AE56-FA301D3DFA4C}';
  IID_IBMDStreamingDiscovery: TGUID = '{2C837444-F989-4D87-901A-47C8A36D096D}';
  IID_IBMDStreamingVideoEncodingMode: TGUID = '{1AB8035B-CD13-458D-B6DF-5E8F7C2141D9}';
  IID_IBMDStreamingMutableVideoEncodingMode: TGUID = '{19BF7D90-1E0A-400D-B2C6-FFC4E78AD49D}';
  IID_IBMDStreamingVideoEncodingModePresetIterator: TGUID = '{7AC731A3-C950-4AD0-804A-8377AA51C6C4}';
  IID_IBMDStreamingDeviceInput: TGUID = '{24B6B6EC-1727-44BB-9818-34FF086ACF98}';
  IID_IBMDStreamingH264NALParser: TGUID = '{5867F18C-5BFA-4CCC-B2A7-9DFD140417D2}';
  CLASS_CBMDStreamingDiscovery: TGUID = '{23A4EDF5-A0E5-432C-94EF-3BABB5F81C82}';
  CLASS_CBMDStreamingH264NALParser: TGUID = '{7753EFBD-951C-407C-97A5-23C737B73B52}';
  
// Type Declarations

// Enumeration Mapping

(* Enum BMDStreamingDeviceMode - Device modes *)
type
  _BMDStreamingDeviceMode = TOleEnum;
const
    bmdStreamingDeviceIdle                                       = (* 'idle' *) $69646C65;
    bmdStreamingDeviceEncoding                                   = (* 'enco' *) $656E636F;
    bmdStreamingDeviceStopping                                   = (* 'stop' *) $73746F70;
    bmdStreamingDeviceUnknown                                    = (* 'munk' *) $6D756E6B;

(* Enum BMDStreamingEncodingFrameRate - Encoded frame rates *)
type
  _BMDStreamingEncodingFrameRate = TOleEnum;
const
    (* Interlaced rates *)
    bmdStreamingEncodedFrameRate50i                              = (* 'e50i' *) $65353069;
    bmdStreamingEncodedFrameRate5994i                            = (* 'e59i' *) $65353969;
    bmdStreamingEncodedFrameRate60i                              = (* 'e60i' *) $65363069;
    (* Progressive rates *)
    bmdStreamingEncodedFrameRate2398p                            = (* 'e23p' *) $65323370;
    bmdStreamingEncodedFrameRate24p                              = (* 'e24p' *) $65323470;
    bmdStreamingEncodedFrameRate25p                              = (* 'e25p' *) $65323570;
    bmdStreamingEncodedFrameRate2997p                            = (* 'e29p' *) $65323970;
    bmdStreamingEncodedFrameRate30p                              = (* 'e30p' *) $65333070;
    bmdStreamingEncodedFrameRate50p                              = (* 'e50p' *) $65353070;
    bmdStreamingEncodedFrameRate5994p                            = (* 'e59p' *) $65353970;
    bmdStreamingEncodedFrameRate60p                              = (* 'e60p' *) $65363070;

(* Enum BMDStreamingEncodingSupport - Output encoding mode supported flag *)
type
  _BMDStreamingEncodingSupport = TOleEnum;
const
    bmdStreamingEncodingModeNotSupported                         = 0;
    bmdStreamingEncodingModeSupported                            = 1;
    bmdStreamingEncodingModeSupportedWithChanges                 = 2;

(* Enum BMDStreamingVideoCodec - Video codecs *)
type
  _BMDStreamingVideoCodec = TOleEnum;
const
    bmdStreamingVideoCodecH264                                   = (* 'H264' *) $48323634;

(* Enum BMDStreamingH264Profile - H264 encoding profile *)
type
  _BMDStreamingH264Profile = TOleEnum;
const
    bmdStreamingH264ProfileHigh                                  = (* 'high' *) $68696768;
    bmdStreamingH264ProfileMain                                  = (* 'main' *) $6D61696E;
    bmdStreamingH264ProfileBaseline                              = (* 'base' *) $62617365;

(* Enum BMDStreamingH264Level - H264 encoding level *)
type
  _BMDStreamingH264Level = TOleEnum;
const
    bmdStreamingH264Level12                                      = (* 'lv12' *) $6C763132;
    bmdStreamingH264Level13                                      = (* 'lv13' *) $6C763133;
    bmdStreamingH264Level2                                       = (* 'lv2 ' *) $6C763220;
    bmdStreamingH264Level21                                      = (* 'lv21' *) $6C763231;
    bmdStreamingH264Level22                                      = (* 'lv22' *) $6C763232;
    bmdStreamingH264Level3                                       = (* 'lv3 ' *) $6C763320;
    bmdStreamingH264Level31                                      = (* 'lv31' *) $6C763331;
    bmdStreamingH264Level32                                      = (* 'lv32' *) $6C763332;
    bmdStreamingH264Level4                                       = (* 'lv4 ' *) $6C763420;
    bmdStreamingH264Level41                                      = (* 'lv41' *) $6C763431;
    bmdStreamingH264Level42                                      = (* 'lv42' *) $6C763432;

(* Enum BMDStreamingH264EntropyCoding - H264 entropy coding *)
type
  _BMDStreamingH264EntropyCoding = TOleEnum;
const
    bmdStreamingH264EntropyCodingCAVLC                           = (* 'EVLC' *) $45564C43;
    bmdStreamingH264EntropyCodingCABAC                           = (* 'EBAC' *) $45424143;

(* Enum BMDStreamingAudioCodec - Audio codecs *)
type
  _BMDStreamingAudioCodec = TOleEnum;
const
    bmdStreamingAudioCodecAAC                                    = (* 'AAC ' *) $41414320;

(* Enum BMDStreamingEncodingModePropertyID - Encoding mode properties *)
type
  _BMDStreamingEncodingModePropertyID = TOleEnum;
const
    (* Integers; Video Properties *)
    bmdStreamingEncodingPropertyVideoFrameRate                   = (* 'vfrt' *) $76667274;	// Uses values of type BMDStreamingEncodingFrameRate
    bmdStreamingEncodingPropertyVideoBitRateKbps                 = (* 'vbrt' *) $76627274;
    (* Integers; H264 Properties *)
    bmdStreamingEncodingPropertyH264Profile                      = (* 'hprf' *) $68707266;
    bmdStreamingEncodingPropertyH264Level                        = (* 'hlvl' *) $686C766C;
    bmdStreamingEncodingPropertyH264EntropyCoding                = (* 'hent' *) $68656E74;
    (* Flags; H264 Properties *)
    bmdStreamingEncodingPropertyH264HasBFrames                   = (* 'hBfr' *) $68426672;
    (* Integers; Audio Properties *)
    bmdStreamingEncodingPropertyAudioCodec                       = (* 'acdc' *) $61636463;
    bmdStreamingEncodingPropertyAudioSampleRate                  = (* 'asrt' *) $61737274;
    bmdStreamingEncodingPropertyAudioChannelCount                = (* 'achc' *) $61636863;
    bmdStreamingEncodingPropertyAudioBitRateKbps                 = (* 'abrt' *) $61627274;

// Forward Declarations
type
  IBMDStreamingDeviceNotificationCallback = interface;
  IBMDStreamingH264InputCallback = interface;
  IBMDStreamingH264NALPacket = interface;
  IBMDStreamingAudioPacket = interface;
  IBMDStreamingMPEG2TSPacket = interface;
  IBMDStreamingDiscovery = interface;
  IBMDStreamingVideoEncodingMode = interface;
  IBMDStreamingMutableVideoEncodingMode = interface;
  IBMDStreamingVideoEncodingModePresetIterator = interface;
  IBMDStreamingDeviceInput = interface;
  IBMDStreamingH264NALParser = interface;

(* Interface IBMDStreamingDeviceNotificationCallback - Device notification callbacks. *)
// *********************************************************************//
// Interface: IBMDStreamingDeviceNotificationCallback
// Flags:     (0)
// GUID:      {F9531D64-3305-4B29-A387-7F74BB0D0E84}
// *********************************************************************//
  IBMDStreamingDeviceNotificationCallback = interface(IUnknown)
    ['{F9531D64-3305-4B29-A387-7F74BB0D0E84}']
    function StreamingDeviceArrived(const device: IDeckLink): HResult; stdcall;
    function StreamingDeviceRemoved(const device: IDeckLink): HResult; stdcall;
    function StreamingDeviceModeChanged(const device: IDeckLink; mode: _BMDStreamingDeviceMode): HResult; stdcall;
  end;

(* Interface IBMDStreamingH264InputCallback - H264 input callbacks. *)
// *********************************************************************//
// Interface: IBMDStreamingH264InputCallback
// Flags:     (0)
// GUID:      {823C475F-55AE-46F9-890C-537CC5CEDCCA}
// *********************************************************************//
  IBMDStreamingH264InputCallback = interface(IUnknown)
    ['{823C475F-55AE-46F9-890C-537CC5CEDCCA}']
    function H264NALPacketArrived(const nalPacket: IBMDStreamingH264NALPacket): HResult; stdcall;
    function H264AudioPacketArrived(const audioPacket: IBMDStreamingAudioPacket): HResult; stdcall;
    function MPEG2TSPacketArrived(const tsPacket: IBMDStreamingMPEG2TSPacket): HResult; stdcall;
    function H264VideoInputConnectorScanningChanged: HResult; stdcall;
    function H264VideoInputConnectorChanged: HResult; stdcall;
    function H264VideoInputModeChanged: HResult; stdcall;
  end;

(* Interface IBMDStreamingH264NALPacket - Represent an H.264 NAL packet *)
// *********************************************************************//
// Interface: IBMDStreamingH264NALPacket
// Flags:     (0)
// GUID:      {E260E955-14BE-4395-9775-9F02CC0A9D89}
// *********************************************************************//
  IBMDStreamingH264NALPacket = interface(IUnknown)
    ['{E260E955-14BE-4395-9775-9F02CC0A9D89}']
    function GetPayloadSize: Integer; stdcall;
    function GetBytes(out buffer: Pointer): HResult; stdcall;
    function GetBytesWithSizePrefix(out buffer: Pointer): HResult; stdcall;
    function GetDisplayTime(requestedTimeScale: Largeuint; out displayTime: Largeuint): HResult; stdcall;
    function GetPacketIndex(out packetIndex: SYSUINT): HResult; stdcall;
  end;

(* Interface IBMDStreamingAudioPacket - Represents a chunk of audio data *)
// *********************************************************************//
// Interface: IBMDStreamingAudioPacket
// Flags:     (0)
// GUID:      {D9EB5902-1AD2-43F4-9E2C-3CFA50B5EE19}
// *********************************************************************//
  IBMDStreamingAudioPacket = interface(IUnknown)
    ['{D9EB5902-1AD2-43F4-9E2C-3CFA50B5EE19}']
    function GetCodec: _BMDStreamingAudioCodec; stdcall;
    function GetPayloadSize: Integer; stdcall;
    function GetBytes(out buffer: Pointer): HResult; stdcall;
    function GetPlayTime(requestedTimeScale: Largeuint; out playTime: Largeuint): HResult; stdcall;
    function GetPacketIndex(out packetIndex: SYSUINT): HResult; stdcall;
  end;

(* Interface IBMDStreamingMPEG2TSPacket - Represent an MPEG2 Transport Stream packet *)
// *********************************************************************//
// Interface: IBMDStreamingMPEG2TSPacket
// Flags:     (0)
// GUID:      {91810D1C-4FB3-4AAA-AE56-FA301D3DFA4C}
// *********************************************************************//
  IBMDStreamingMPEG2TSPacket = interface(IUnknown)
    ['{91810D1C-4FB3-4AAA-AE56-FA301D3DFA4C}']
    function GetPayloadSize: Integer; stdcall;
    function GetBytes(out buffer: Pointer): HResult; stdcall;
  end;

(* Interface IBMDStreamingDiscovery - Installs device notifications *)  
// *********************************************************************//
// Interface: IBMDStreamingDiscovery
// Flags:     (0)
// GUID:      {2C837444-F989-4D87-901A-47C8A36D096D}
// *********************************************************************//
  IBMDStreamingDiscovery = interface(IUnknown)
    ['{2C837444-F989-4D87-901A-47C8A36D096D}']
    function InstallDeviceNotifications(const theCallback: IBMDStreamingDeviceNotificationCallback): HResult; stdcall;
    function UninstallDeviceNotifications: HResult; stdcall;
  end;

(* Interface IBMDStreamingVideoEncodingMode - Represents an encoded video mode. *)
// *********************************************************************//
// Interface: IBMDStreamingVideoEncodingMode
// Flags:     (0)
// GUID:      {1AB8035B-CD13-458D-B6DF-5E8F7C2141D9}
// *********************************************************************//
  IBMDStreamingVideoEncodingMode = interface(IUnknown)
    ['{1AB8035B-CD13-458D-B6DF-5E8F7C2141D9}']
    function GetName(out name: WideString): HResult; stdcall;
    function GetPresetID: SYSUINT; stdcall;
    function GetSourcePositionX: SYSUINT; stdcall;
    function GetSourcePositionY: SYSUINT; stdcall;
    function GetSourceWidth: SYSUINT; stdcall;
    function GetSourceHeight: SYSUINT; stdcall;
    function GetDestWidth: SYSUINT; stdcall;
    function GetDestHeight: SYSUINT; stdcall;
    function GetFlag(cfgID: _BMDStreamingEncodingModePropertyID; out value: Integer): HResult; stdcall;
    function GetInt(cfgID: _BMDStreamingEncodingModePropertyID; out value: Int64): HResult; stdcall;
    function GetFloat(cfgID: _BMDStreamingEncodingModePropertyID; out value: Double): HResult; stdcall;
    function GetString(cfgID: _BMDStreamingEncodingModePropertyID; out value: WideString): HResult; stdcall;
    function CreateMutableVideoEncodingMode(out newEncodingMode: IBMDStreamingMutableVideoEncodingMode): HResult; stdcall;
  end;

(* Interface IBMDStreamingMutableVideoEncodingMode - Represents a mutable encoded video mode. *)
// *********************************************************************//
// Interface: IBMDStreamingMutableVideoEncodingMode
// Flags:     (0)
// GUID:      {19BF7D90-1E0A-400D-B2C6-FFC4E78AD49D}
// *********************************************************************//
  IBMDStreamingMutableVideoEncodingMode = interface(IBMDStreamingVideoEncodingMode)
    ['{19BF7D90-1E0A-400D-B2C6-FFC4E78AD49D}']
    function SetSourceRect(posX: SYSUINT; posY: SYSUINT; width: SYSUINT; height: SYSUINT): HResult; stdcall;
    function SetDestSize(width: SYSUINT; height: SYSUINT): HResult; stdcall;
    function SetFlag(cfgID: _BMDStreamingEncodingModePropertyID; value: Integer): HResult; stdcall;
    function SetInt(cfgID: _BMDStreamingEncodingModePropertyID; value: Int64): HResult; stdcall;
    function SetFloat(cfgID: _BMDStreamingEncodingModePropertyID; value: Double): HResult; stdcall;
    function SetString(cfgID: _BMDStreamingEncodingModePropertyID; const value: WideString): HResult; stdcall;
  end;
  
(* Interface IBMDStreamingVideoEncodingModePresetIterator - Enumerates encoding mode presets *)  
// *********************************************************************//
// Interface: IBMDStreamingVideoEncodingModePresetIterator
// Flags:     (0)
// GUID:      {7AC731A3-C950-4AD0-804A-8377AA51C6C4}
// *********************************************************************//
  IBMDStreamingVideoEncodingModePresetIterator = interface(IUnknown)
    ['{7AC731A3-C950-4AD0-804A-8377AA51C6C4}']
    function Next(out videoEncodingMode: IBMDStreamingVideoEncodingMode): HResult; stdcall;
  end;

(* Interface IBMDStreamingDeviceInput - Created by QueryInterface from IDeckLink *)
// *********************************************************************//
// Interface: IBMDStreamingDeviceInput
// Flags:     (0)
// GUID:      {24B6B6EC-1727-44BB-9818-34FF086ACF98}
// *********************************************************************//
  IBMDStreamingDeviceInput = interface(IUnknown)
    ['{24B6B6EC-1727-44BB-9818-34FF086ACF98}']
	(* Input modes *)
    function DoesSupportVideoInputMode(inputMode: _BMDDisplayMode; out result: Integer): HResult; stdcall;
    function GetVideoInputModeIterator(out iterator: IDeckLinkDisplayModeIterator): HResult; stdcall;
    function SetVideoInputMode(inputMode: _BMDDisplayMode): HResult; stdcall;
    (* Capture modes *)
	function GetCurrentDetectedVideoInputMode(out detectedMode: _BMDDisplayMode): HResult; stdcall;
    function GetVideoEncodingMode(out encodingMode: IBMDStreamingVideoEncodingMode): HResult; stdcall;
    function GetVideoEncodingModePresetIterator(inputMode: _BMDDisplayMode; 
                                                out iterator: IBMDStreamingVideoEncodingModePresetIterator): HResult; stdcall;
    function DoesSupportVideoEncodingMode(inputMode: _BMDDisplayMode; 
                                          const encodingMode: IBMDStreamingVideoEncodingMode; 
                                          out result: _BMDStreamingEncodingSupport; 
                                          out changedEncodingMode: IBMDStreamingVideoEncodingMode): HResult; stdcall;
    function SetVideoEncodingMode(const encodingMode: IBMDStreamingVideoEncodingMode): HResult; stdcall;
    (* Input control *)
    function StartCapture: HResult; stdcall;
    function StopCapture: HResult; stdcall;
    function SetCallback(const theCallback: IUnknown): HResult; stdcall;
  end;

(* Interface IBMDStreamingH264NALParser - For basic NAL parsing *)
// *********************************************************************//
// Interface: IBMDStreamingH264NALParser
// Flags:     (0)
// GUID:      {5867F18C-5BFA-4CCC-B2A7-9DFD140417D2}
// *********************************************************************//
  IBMDStreamingH264NALParser = interface(IUnknown)
    ['{5867F18C-5BFA-4CCC-B2A7-9DFD140417D2}']
    function IsNALSequenceParameterSet(const nal: IBMDStreamingH264NALPacket): HResult; stdcall;
    function IsNALPictureParameterSet(const nal: IBMDStreamingH264NALPacket): HResult; stdcall;
    function GetProfileAndLevelFromSPS(const nal: IBMDStreamingH264NALPacket; 
                                       out profileIdc: SYSUINT; out profileCompatability: SYSUINT; 
                                       out levelIdc: SYSUINT): HResult; stdcall;
  end;


(* Coclasses *)
// *********************************************************************//
// The Class CoCBMDStreamingDiscovery provides a Create and CreateRemote method to          
// create instances of the default interface IBMDStreamingDiscovery exposed by              
// the CoClass CBMDStreamingDiscovery. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCBMDStreamingDiscovery = class
    class function Create: IBMDStreamingDiscovery;
    class function CreateRemote(const MachineName: string): IBMDStreamingDiscovery;
  end;

// *********************************************************************//
// The Class CoCBMDStreamingH264NALParser provides a Create and CreateRemote method to          
// create instances of the default interface IBMDStreamingH264NALParser exposed by              
// the CoClass CBMDStreamingH264NALParser. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCBMDStreamingH264NALParser = class
    class function Create: IBMDStreamingH264NALParser;
    class function CreateRemote(const MachineName: string): IBMDStreamingH264NALParser;
  end;

implementation

uses System.Win.ComObj;

class function CoCBMDStreamingDiscovery.Create: IBMDStreamingDiscovery;
begin
  Result := CreateComObject(CLASS_CBMDStreamingDiscovery) as IBMDStreamingDiscovery;
end;

class function CoCBMDStreamingDiscovery.CreateRemote(const MachineName: string): IBMDStreamingDiscovery;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CBMDStreamingDiscovery) as IBMDStreamingDiscovery;
end;

class function CoCBMDStreamingH264NALParser.Create: IBMDStreamingH264NALParser;
begin
  Result := CreateComObject(CLASS_CBMDStreamingH264NALParser) as IBMDStreamingH264NALParser;
end;

class function CoCBMDStreamingH264NALParser.CreateRemote(const MachineName: string): IBMDStreamingH264NALParser;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CBMDStreamingH264NALParser) as IBMDStreamingH264NALParser;
end;

end.


