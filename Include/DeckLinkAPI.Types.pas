(* -LICENSE-START-
** Copyright (c) 2016 Blackmagic Design
**
** Permission is hereby granted; free of charge; to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use; reproduce; display; distribute;
** execute; and transmit the Software; and to prepare derivative works of the
** Software; and to permit third-parties to whom the Software is furnished to
** do so; all subject to the following:
** 
** The copyright notices in the Software and this entire statement; including
** the above license grant; this restriction and the following disclaimer;
** must be included in all copies of the Software; in whole or in part; and
** all derivative works of the Software; unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS"; WITHOUT WARRANTY OF ANY KIND; EXPRESS OR
** IMPLIED; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY;
** FITNESS FOR A PARTICULAR PURPOSE; TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY; WHETHER IN CONTRACT; TORT OR OTHERWISE;
** ARISING FROM; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*)


unit DeckLinkAPI.Types;

{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses
  System.SysUtils, System.Variants, Winapi.ActiveX;

const
  IID_IDeckLinkTimecode: TGUID = '{BC6CFBD3-8317-4325-AC1C-1216391E9340}';
  
// Type Declarations
type
	BMDTimeValue  = Int64;
	BMDTimeScale  = Int64;
	BMDTimecodeBCD = cardinal;
	BMDTimecodeUserBits = cardinal;

// Enumeration Mapping


(* Enum BMDTimecodeFlags - Timecode flags *)
type
  _BMDTimecodeFlags = TOleEnum;
const
    bmdTimecodeFlagDefault                                       = 0;
    bmdTimecodeIsDropFrame                                       = 1 shl 0;
    bmdTimecodeFieldMark                                         = 1 shl 1;

(* Enum BMDVideoConnection - Video connection types *)
type
  _BMDVideoConnection = TOleEnum;
const
    bmdVideoConnectionSDI                                        = 1 shl 0;
    bmdVideoConnectionHDMI                                       = 1 shl 1;
    bmdVideoConnectionOpticalSDI                                 = 1 shl 2;
    bmdVideoConnectionComponent                                  = 1 shl 3;
    bmdVideoConnectionComposite                                  = 1 shl 4;
    bmdVideoConnectionSVideo                                     = 1 shl 5;

(* Enum BMDAudioConnection - Audio connection types *)
type
  _BMDAudioConnection = TOleEnum;
const
    bmdAudioConnectionEmbedded                                   = 1 shl 0;
    bmdAudioConnectionAESEBU                                     = 1 shl 1;
    bmdAudioConnectionAnalog                                     = 1 shl 2;
    bmdAudioConnectionAnalogXLR                                  = 1 shl 3;
    bmdAudioConnectionAnalogRCA                                  = 1 shl 4;
    bmdAudioConnectionMicrophone                                 = 1 shl 5;
    bmdAudioConnectionHeadphones                                 = 1 shl 6;

(* Enum BMDDeckControlConnection - Deck control connections *)
type
  _BMDDeckControlConnection = TOleEnum;
const
    bmdDeckControlConnectionRS422Remote1                         = 1 shl 0;
    bmdDeckControlConnectionRS422Remote2                         = 1 shl 1;

// Forward Declarations
type
  IDeckLinkTimecode = interface;

(* Interface IDeckLinkTimecode - Used for video frame timecode representation. *)
// *********************************************************************//
// Interface: IDeckLinkTimecode
// Flags:     (0)
// GUID:      {BC6CFBD3-8317-4325-AC1C-1216391E9340}
// *********************************************************************//
  IDeckLinkTimecode = interface(IUnknown)
    ['{BC6CFBD3-8317-4325-AC1C-1216391E9340}']
    function GetBCD: SYSUINT; stdcall;
    function GetComponents(out hours: Byte; out minutes: Byte; out seconds: Byte; out frames: Byte): HResult; stdcall;
    function GetString(out timecode: WideString): HResult; stdcall;
    function GetFlags: _BMDTimecodeFlags; stdcall;
    function GetTimecodeUserBits(out userBits: SYSUINT): HResult; stdcall;
  end;

(* Coclasses *)

implementation

end.