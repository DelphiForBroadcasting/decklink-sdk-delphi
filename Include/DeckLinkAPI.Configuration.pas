(* -LICENSE-START-
** Copyright (c) 2016 Blackmagic Design
**
** Permission is hereby granted; free of charge; to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use; reproduce; display; distribute;
** execute; and transmit the Software; and to prepare derivative works of the
** Software; and to permit third-parties to whom the Software is furnished to
** do so; all subject to the following:
** 
** The copyright notices in the Software and this entire statement; including
** the above license grant; this restriction and the following disclaimer;
** must be included in all copies of the Software; in whole or in part; and
** all derivative works of the Software; unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS"; WITHOUT WARRANTY OF ANY KIND; EXPRESS OR
** IMPLIED; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY;
** FITNESS FOR A PARTICULAR PURPOSE; TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY; WHETHER IN CONTRACT; TORT OR OTHERWISE;
** ARISING FROM; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*)

unit DeckLinkAPI.Configuration;

{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses
  System.SysUtils, System.Variants, Winapi.ActiveX;

const
  IID_IDeckLinkConfiguration: TGUID = '{EF90380B-4AE5-4346-9077-E288E149F129}';
  IID_IDeckLinkEncoderConfiguration: TGUID = '{138050E5-C60A-4552-BF3F-0F358049327E}';
  
// Type Declarations

// Enumeration Mapping

(* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID *)
type
  _BMDDeckLinkConfigurationID = TOleEnum;
const
    (* Serial port Flags *)

    bmdDeckLinkConfigSwapSerialRxTx                              = (* 'ssrt' *) $73737274;

    (* Video Input/Output Integers *)

    bmdDeckLinkConfigHDMI3DPackingFormat                         = (* '3dpf' *) $33647066;
    bmdDeckLinkConfigBypass                                      = (* 'byps' *) $62797073;
    bmdDeckLinkConfigClockTimingAdjustment                       = (* 'ctad' *) $63746164;
    bmdDeckLinkConfigDuplexMode                                  = (* 'dupx' *) $64757078;

    (* Audio Input/Output Flags *)

    bmdDeckLinkConfigAnalogAudioConsumerLevels                   = (* 'aacl' *) $6161636C;

    (* Video output flags *)

    bmdDeckLinkConfigFieldFlickerRemoval                         = (* 'fdfr' *) $66646672;
    bmdDeckLinkConfigHD1080p24ToHD1080i5994Conversion            = (* 'to59' *) $746F3539;
    bmdDeckLinkConfig444SDIVideoOutput                           = (* '444o' *) $3434346F;
    bmdDeckLinkConfigBlackVideoOutputDuringCapture               = (* 'bvoc' *) $62766F63;
    bmdDeckLinkConfigLowLatencyVideoOutput                       = (* 'llvo' *) $6C6C766F;
    bmdDeckLinkConfigDownConversionOnAllAnalogOutput             = (* 'caao' *) $6361616F;
    bmdDeckLinkConfigSMPTELevelAOutput                           = (* 'smta' *) $736D7461;
	
    (* Video Output Flags *)

    bmdDeckLinkConfigOutput1080pAsPsF                            = (* 'pfpr' *) $70667072;

    (* Video Output Integers *)

    bmdDeckLinkConfigVideoOutputConnection                       = (* 'vocn' *) $766F636E;
    bmdDeckLinkConfigVideoOutputConversionMode                   = (* 'vocm' *) $766F636D;
    bmdDeckLinkConfigAnalogVideoOutputFlags                      = (* 'avof' *) $61766F66;
    bmdDeckLinkConfigReferenceInputTimingOffset                  = (* 'glot' *) $676C6F74;
    bmdDeckLinkConfigVideoOutputIdleOperation                    = (* 'voio' *) $766F696F;
    bmdDeckLinkConfigDefaultVideoOutputMode                      = (* 'dvom' *) $64766F6D;
    bmdDeckLinkConfigDefaultVideoOutputModeFlags                 = (* 'dvof' *) $64766F66;
    bmdDeckLinkConfigSDIOutputLinkConfiguration                  = (* 'solc' *) $736F6C63;

    (* Video Output Floats *)

    bmdDeckLinkConfigVideoOutputComponentLumaGain                = (* 'oclg' *) $6F636C67;
    bmdDeckLinkConfigVideoOutputComponentChromaBlueGain          = (* 'occb' *) $6F636362;
    bmdDeckLinkConfigVideoOutputComponentChromaRedGain           = (* 'occr' *) $6F636372;
    bmdDeckLinkConfigVideoOutputCompositeLumaGain                = (* 'oilg' *) $6F696C67;
    bmdDeckLinkConfigVideoOutputCompositeChromaGain              = (* 'oicg' *) $6F696367;
    bmdDeckLinkConfigVideoOutputSVideoLumaGain                   = (* 'oslg' *) $6F736C67;
    bmdDeckLinkConfigVideoOutputSVideoChromaGain                 = (* 'oscg' *) $6F736367;

    (* Video Input Flags *)

    bmdDeckLinkConfigVideoInputScanning                          = (* 'visc' *) $76697363;	// Applicable to H264 Pro Recorder only
    bmdDeckLinkConfigUseDedicatedLTCInput                        = (* 'dltc' *) $646C7463;	// Use timecode from LTC input instead of SDI stream
    bmdDeckLinkConfigSDIInput3DPayloadOverride                   = (* '3dds' *) $33646473;

    (* Video Input Flags *)

    bmdDeckLinkConfigCapture1080pAsPsF                           = (* 'cfpr' *) $63667072;
	
	
    (* Video Input Integers *)

    bmdDeckLinkConfigVideoInputConnection                        = (* 'vicn' *) $7669636E;
    bmdDeckLinkConfigAnalogVideoInputFlags                       = (* 'avif' *) $61766966;
    bmdDeckLinkConfigVideoInputConversionMode                    = (* 'vicm' *) $7669636D;
    bmdDeckLinkConfig32PulldownSequenceInitialTimecodeFrame      = (* 'pdif' *) $70646966;
    bmdDeckLinkConfigVANCSourceLine1Mapping                      = (* 'vsl1' *) $76736C31;
    bmdDeckLinkConfigVANCSourceLine2Mapping                      = (* 'vsl2' *) $76736C32;
    bmdDeckLinkConfigVANCSourceLine3Mapping                      = (* 'vsl3' *) $76736C33;
    bmdDeckLinkConfigCapturePassThroughMode                      = (* 'cptm' *) $6370746D;

    (* Video Input Floats *)

    bmdDeckLinkConfigVideoInputComponentLumaGain                 = (* 'iclg' *) $69636C67;
    bmdDeckLinkConfigVideoInputComponentChromaBlueGain           = (* 'iccb' *) $69636362;
    bmdDeckLinkConfigVideoInputComponentChromaRedGain            = (* 'iccr' *) $69636372;
    bmdDeckLinkConfigVideoInputCompositeLumaGain                 = (* 'iilg' *) $69696C67;
    bmdDeckLinkConfigVideoInputCompositeChromaGain               = (* 'iicg' *) $69696367;
    bmdDeckLinkConfigVideoInputSVideoLumaGain                    = (* 'islg' *) $69736C67;
    bmdDeckLinkConfigVideoInputSVideoChromaGain                  = (* 'iscg' *) $69736367;

    (* Audio Input Flags *)

    bmdDeckLinkConfigMicrophonePhantomPower                      = (* 'mphp' *) $6D706870;

    (* Audio Input Integers *)

    bmdDeckLinkConfigAudioInputConnection                        = (* 'aicn' *) $6169636E;

    (* Audio Input Floats *)

    bmdDeckLinkConfigAnalogAudioInputScaleChannel1               = (* 'ais1' *) $61697331;
    bmdDeckLinkConfigAnalogAudioInputScaleChannel2               = (* 'ais2' *) $61697332;
    bmdDeckLinkConfigAnalogAudioInputScaleChannel3               = (* 'ais3' *) $61697333;
    bmdDeckLinkConfigAnalogAudioInputScaleChannel4               = (* 'ais4' *) $61697334;
    bmdDeckLinkConfigDigitalAudioInputScale                      = (* 'dais' *) $64616973;
    bmdDeckLinkConfigMicrophoneInputGain                         = (* 'micg' *) $6D696367;

    (* Audio Output Integers *)

    bmdDeckLinkConfigAudioOutputAESAnalogSwitch                  = (* 'aoaa' *) $616F6161;

    (* Audio Output Floats *)

    bmdDeckLinkConfigAnalogAudioOutputScaleChannel1              = (* 'aos1' *) $616F7331;
    bmdDeckLinkConfigAnalogAudioOutputScaleChannel2              = (* 'aos2' *) $616F7332;
    bmdDeckLinkConfigAnalogAudioOutputScaleChannel3              = (* 'aos3' *) $616F7333;
    bmdDeckLinkConfigAnalogAudioOutputScaleChannel4              = (* 'aos4' *) $616F7334;
    bmdDeckLinkConfigDigitalAudioOutputScale                     = (* 'daos' *) $64616F73;
    bmdDeckLinkConfigHeadphoneVolume                             = (* 'hvol' *) $68766F6C;

    (* Device Information Strings *)

    bmdDeckLinkConfigDeviceInformationLabel                      = (* 'dila' *) $64696C61;
    bmdDeckLinkConfigDeviceInformationSerialNumber               = (* 'disn' *) $6469736E;
    bmdDeckLinkConfigDeviceInformationCompany                    = (* 'dico' *) $6469636F;
    bmdDeckLinkConfigDeviceInformationPhone                      = (* 'diph' *) $64697068;
    bmdDeckLinkConfigDeviceInformationEmail                      = (* 'diem' *) $6469656D;
    bmdDeckLinkConfigDeviceInformationDate                       = (* 'dida' *) $64696461;

    (* Deck Control Integers *)

    bmdDeckLinkConfigDeckControlConnection                       = (* 'dcco' *) $6463636F;


(* Enum BMDDeckLinkEncoderConfigurationID - DeckLink Encoder Configuration ID *)
type
  _BMDDeckLinkEncoderConfigurationID = TOleEnum;
const
    (* Video Encoder Integers *)

    bmdDeckLinkEncoderConfigPreferredBitDepth                    = (* 'epbr' *) $65706272;
    bmdDeckLinkEncoderConfigFrameCodingMode                      = (* 'efcm' *) $6566636D;

    (* HEVC/H.265 Encoder Integers *)

    bmdDeckLinkEncoderConfigH265TargetBitrate                    = (* 'htbr' *) $68746272;

    (* DNxHR/DNxHD Compression ID *)

    bmdDeckLinkEncoderConfigDNxHRCompressionID                   = (* 'dcid' *) $64636964;

    (* DNxHR/DNxHD Level *)

    bmdDeckLinkEncoderConfigDNxHRLevel                           = (* 'dlev' *) $646C6576;

    (* Encoded Sample Decriptions *)

    bmdDeckLinkEncoderConfigMPEG4SampleDescription               = (* 'stsE' *) $73747345;	// Full MPEG4 sample description (aka SampleEntry of an 'stsd' atom-box). Useful for MediaFoundation; QuickTime; MKV and more
    bmdDeckLinkEncoderConfigMPEG4CodecSpecificDesc               = (* 'esds' *) $65736473;	// Sample description extensions only (atom stream; each with size and fourCC header). Useful for AVFoundation; VideoToolbox; MKV and more


// Forward Declarations
type
  IDeckLinkConfiguration = interface;
  IDeckLinkEncoderConfiguration = interface;
  

// *********************************************************************//
// Interface: IDeckLinkConfiguration
// Flags:     (0)
// GUID:      {EF90380B-4AE5-4346-9077-E288E149F129}
// *********************************************************************//
  IDeckLinkConfiguration = interface(IUnknown)
    ['{EF90380B-4AE5-4346-9077-E288E149F129}']
    function SetFlag(cfgID: _BMDDeckLinkConfigurationID; value: Integer): HResult; stdcall;
    function GetFlag(cfgID: _BMDDeckLinkConfigurationID; out value: Integer): HResult; stdcall;
    function SetInt(cfgID: _BMDDeckLinkConfigurationID; value: Int64): HResult; stdcall;
    function GetInt(cfgID: _BMDDeckLinkConfigurationID; out value: Int64): HResult; stdcall;
    function SetFloat(cfgID: _BMDDeckLinkConfigurationID; value: Double): HResult; stdcall;
    function GetFloat(cfgID: _BMDDeckLinkConfigurationID; out value: Double): HResult; stdcall;
    function SetString(cfgID: _BMDDeckLinkConfigurationID; const value: WideString): HResult; stdcall;
    function GetString(cfgID: _BMDDeckLinkConfigurationID; out value: WideString): HResult; stdcall;
    function WriteConfigurationToPreferences: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkEncoderConfiguration
// Flags:     (0)
// GUID:      {138050E5-C60A-4552-BF3F-0F358049327E}
// *********************************************************************//
  IDeckLinkEncoderConfiguration = interface(IUnknown)
    ['{138050E5-C60A-4552-BF3F-0F358049327E}']
    function SetFlag(cfgID: _BMDDeckLinkEncoderConfigurationID; value: Integer): HResult; stdcall;
    function GetFlag(cfgID: _BMDDeckLinkEncoderConfigurationID; out value: Integer): HResult; stdcall;
    function SetInt(cfgID: _BMDDeckLinkEncoderConfigurationID; value: Int64): HResult; stdcall;
    function GetInt(cfgID: _BMDDeckLinkEncoderConfigurationID; out value: Int64): HResult; stdcall;
    function SetFloat(cfgID: _BMDDeckLinkEncoderConfigurationID; value: Double): HResult; stdcall;
    function GetFloat(cfgID: _BMDDeckLinkEncoderConfigurationID; out value: Double): HResult; stdcall;
    function SetString(cfgID: _BMDDeckLinkEncoderConfigurationID; const value: WideString): HResult; stdcall;
    function GetString(cfgID: _BMDDeckLinkEncoderConfigurationID; out value: WideString): HResult; stdcall;
    function GetBytes(cfgID: _BMDDeckLinkEncoderConfigurationID; buffer: Pointer; 
                      var bufferSize: SYSUINT): HResult; stdcall;
  end;

(* Coclasses *)

implementation

end.

