(* -LICENSE-START-
** Copyright (c) 2016 Blackmagic Design
**
** Permission is hereby granted; free of charge; to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use; reproduce; display; distribute;
** execute; and transmit the Software; and to prepare derivative works of the
** Software; and to permit third-parties to whom the Software is furnished to
** do so; all subject to the following:
** 
** The copyright notices in the Software and this entire statement; including
** the above license grant; this restriction and the following disclaimer;
** must be included in all copies of the Software; in whole or in part; and
** all derivative works of the Software; unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS"; WITHOUT WARRANTY OF ANY KIND; EXPRESS OR
** IMPLIED; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY;
** FITNESS FOR A PARTICULAR PURPOSE; TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY; WHETHER IN CONTRACT; TORT OR OTHERWISE;
** ARISING FROM; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*)

(* DeckLink API *)
unit DeckLinkAPI;

{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses
  System.SysUtils, System.Variants, Winapi.ActiveX,
  DeckLinkAPI.Types, DeckLinkAPI.Modes, DeckLinkAPI.Discovery, DeckLinkAPI.Configuration,
  DeckLinkAPI.DeckControl, DeckLinkAPI.Streaming;

{$INCLUDE DeckLinkAPI.Version.pas}

const
  LIBID_DeckLinkAPI: TGUID = '{D864517A-EDD5-466D-867D-C819F1C052BB}';

  IID_IDeckLinkVideoOutputCallback: TGUID = '{20AA5225-1958-47CB-820B-80A8D521A6EE}';
  IID_IDeckLinkVideoFrame: TGUID = '{3F716FE0-F023-4111-BE5D-EF4414C05B17}';
  IID_IDeckLinkVideoFrameAncillary: TGUID = '{732E723C-D1A4-4E29-9E8E-4A88797A0004}';
  IID_IDeckLinkInputCallback: TGUID = '{DD04E5EC-7415-42AB-AE4A-E80C4DFC044A}';
  IID_IDeckLinkVideoInputFrame: TGUID = '{05CFE374-537C-4094-9A57-680525118F44}';
  IID_IDeckLinkAudioInputPacket: TGUID = '{E43D5870-2894-11DE-8C30-0800200C9A66}';
  IID_IDeckLinkEncoderInputCallback: TGUID = '{ACF13E61-F4A0-4974-A6A7-59AFF6268B31}';
  IID_IDeckLinkEncoderPacket: TGUID = '{B693F36C-316E-4AF1-B6C2-F389A4BCA620}';
  IID_IDeckLinkEncoderVideoPacket: TGUID = '{4E7FD944-E8C7-4EAC-B8C0-7B77F80F5AE0}';
  IID_IDeckLinkEncoderAudioPacket: TGUID = '{49E8EDC8-693B-4E14-8EF6-12C658F5A07A}';
  IID_IDeckLinkMemoryAllocator: TGUID = '{B36EB6E7-9D29-4AA8-92EF-843B87A289E8}';
  IID_IDeckLinkAudioOutputCallback: TGUID = '{403C681B-7F46-4A12-B993-2BB127084EE6}';
  IID_IDeckLinkIterator: TGUID = '{50FB36CD-3063-4B73-BDBB-958087F2D8BA}';
  IID_IDeckLinkAPIInformation: TGUID = '{7BEA3C68-730D-4322-AF34-8A7152B532A4}';
  IID_IDeckLinkOutput: TGUID = '{CC5C8A6E-3F2F-4B3A-87EA-FD78AF300564}';
  IID_IDeckLinkScreenPreviewCallback: TGUID = '{B1D3F49A-85FE-4C5D-95C8-0B5D5DCCD438}';
  IID_IDeckLinkMutableVideoFrame: TGUID = '{69E2639F-40DA-4E19-B6F2-20ACE815C390}';
  IID_IDeckLinkInput: TGUID = '{AF22762B-DFAC-4846-AA79-FA8883560995}';
  IID_IDeckLinkEncoderInput: TGUID = '{270587DA-6B7D-42E7-A1F0-6D853F581185}';
  IID_IDeckLinkVideoFrame3DExtensions: TGUID = '{DA0F7E4A-EDC7-48A8-9CDD-2DB51C729CD7}';
  IID_IDeckLinkVideoFrameMetadataExtensions: TGUID = '{D5973DC9-6432-46D0-8F0B-2496F8A1238F}';
  IID_IDeckLinkH265NALPacket: TGUID = '{639C8E0B-68D5-4BDE-A6D4-95F3AEAFF2E7}';
  IID_IDeckLinkGLScreenPreviewHelper: TGUID = '{504E2209-CAC7-4C1A-9FB4-C5BB6274D22F}';
  IID_IDeckLinkDX9ScreenPreviewHelper: TGUID = '{2094B522-D1A1-40C0-9AC7-1C012218EF02}';
  IID_IDeckLinkNotificationCallback: TGUID = '{B002A1EC-070D-4288-8289-BD5D36E5FF0D}';
  IID_IDeckLinkNotification: TGUID = '{0A1FB207-E215-441B-9B19-6FA1575946C5}';
  IID_IDeckLinkNotificationSource: TGUID = '{2A7320AB-3F9C-4ED1-B364-D17132CDC93D}';
  IID_IDeckLinkAttributes: TGUID = '{ABC11843-D966-44CB-96E2-A1CB5D3135C4}';
  IID_IDeckLinkStatus: TGUID = '{5F558200-4028-49BC-BEAC-DB3FA4A96E46}';
  IID_IDeckLinkKeyer: TGUID = '{89AFCAF5-65F8-421E-98F7-96FE5F5BFBA3}';
  IID_IDeckLinkVideoConversion: TGUID = '{3BBCB8A2-DA2C-42D9-B5D8-88083644E99A}';
  IID_IDeckLinkAudioMixer: TGUID = '{631AC603-6838-4FC2-9579-B1C2596847BF}';
  IID_IDeckLinkDeviceNotificationCallback: TGUID = '{4997053B-0ADF-4CC8-AC70-7A50C4BE728F}';
  IID_IDeckLinkDiscovery: TGUID = '{CDBF631C-BC76-45FA-B44D-C55059BC6101}';
  CLASS_CDeckLinkIterator: TGUID = '{87D2693F-8D4A-45C7-B43F-10ACBA25E68F}';
  CLASS_CDeckLinkAPIInformation: TGUID = '{263CA19F-ED09-482E-9F9D-84005783A237}';
  CLASS_CDeckLinkGLScreenPreviewHelper: TGUID = '{F63E77C7-B655-4A4A-9AD0-3CA85D394343}';
  CLASS_CDeckLinkDX9ScreenPreviewHelper: TGUID = '{CC010023-E01D-4525-9D59-80C8AB3DC7A0}';
  CLASS_CDeckLinkVideoConversion: TGUID = '{7DBBBB11-5B7B-467D-AEA4-CEA468FD368C}';
  CLASS_CDeckLinkDiscovery: TGUID = '{652615D4-26CD-4514-B161-2FD5072ED008}';

// Type Declarations
type
  tagRECT = record
    left: Integer;
    top: Integer;
    right: Integer;
    bottom: Integer;
  end;

// Enumeration Mapping

(* Enum BMDVideoOutputFlags - Flags to control the output of ancillary data along with video. *)
type
  _BMDVideoOutputFlags = TOleEnum;
const
  bmdVideoOutputFlagDefault                                     = 0;
  bmdVideoOutputVANC                                            = 1 shl 0;
  bmdVideoOutputVITC                                            = 1 shl 1;
  bmdVideoOutputRP188                                           = 1 shl 2;
  bmdVideoOutputDualStream3D                                    = 1 shl 4;

(* Enum BMDPacketType - Type of packet *)
type
  _BMDPacketType = TOleEnum;
const
  bmdPacketTypeStreamInterruptedMarker                          = (* 'sint' *) $73696E74;	// A packet of this type marks the time when a video stream was interrupted; for example by a disconnected cable
  bmdPacketTypeStreamData                                       = (* 'sdat' *) $73646174;	// Regular stream data

(* Enum BMDFrameFlags - Frame flags *)
type
  _BMDFrameFlags = TOleEnum;
const
  bmdFrameFlagDefault                                           = 0;
  bmdFrameFlagFlipVertical                                      = 1 shl 0;
  bmdFrameContainsHDRMetadata                                   = 1 shl 1;
  bmdFrameContainsCintelMetadata                                = 1 shl 2;
  (* Flags that are applicable only to instances of IDeckLinkVideoInputFrame *)
  bmdFrameHasNoInputSource                                      = 1 shl 31;

(* Enum BMDVideoInputFlags - Flags applicable to video input *)
type
  _BMDVideoInputFlags = TOleEnum;
const
	bmdVideoInputFlagDefault                                      = 0;
  bmdVideoInputEnableFormatDetection                            = 1 shl 0;
  bmdVideoInputDualStream3D                                     = 1 shl 1;


(* Enum BMDVideoInputFormatChangedEvents - Bitmask passed to the VideoInputFormatChanged notification to identify the properties of the input signal that have changed *)
type
  _BMDVideoInputFormatChangedEvents = TOleEnum;
const
	bmdVideoInputDisplayModeChanged                               = 1 shl 0;
  bmdVideoInputFieldDominanceChanged                            = 1 shl 1;
  bmdVideoInputColorspaceChanged                                = 1 shl 2;


(* Enum BMDDetectedVideoInputFormatFlags - Flags passed to the VideoInputFormatChanged notification to describe the detected video input signal *)
type
  _BMDDetectedVideoInputFormatFlags = TOleEnum;
const
	bmdDetectedVideoInputYCbCr422                                 = 1 shl 0;
  bmdDetectedVideoInputRGB444                                   = 1 shl 1;
  bmdDetectedVideoInputDualStream3D                             = 1 shl 2;


(* Enum BMDDeckLinkCapturePassthroughMode - Enumerates whether the video output is electrically connected to the video input or if the clean switching mode is enabled *)
type
  _BMDDeckLinkCapturePassthroughMode = TOleEnum;
const
	bmdDeckLinkCapturePassthroughModeDirect                       = (* 'pdir' *) $70646972;
  bmdDeckLinkCapturePassthroughModeCleanSwitch                  = (* 'pcln' *) $70636C6E;


(* Enum BMDOutputFrameCompletionResult - Frame Completion Callback *)
type
  _BMDOutputFrameCompletionResult = TOleEnum;
const
  bmdOutputFrameCompleted 										                  = $00000000;
  bmdOutputFrameDisplayedLate 									                = $00000001;
  bmdOutputFrameDropped 										                    = $00000002;
  bmdOutputFrameFlushed 										                    = $00000003;

(* Enum BMDReferenceStatus - GenLock input status *)
type
  _BMDReferenceStatus = TOleEnum;
const
	bmdReferenceNotSupportedByHardware                            = 1 shl 0;
  bmdReferenceLocked                                            = 1 shl 1;

(* Enum BMDAudioFormat - Audio Format *)
type
  _BMDAudioFormat = TOleEnum;
const
	bmdAudioFormatPCM                                             = (* 'lpcm' *) $6C70636D;	// Linear signed PCM samples

(* Enum BMDAudioSampleRate - Audio sample rates supported for output/input *)
type
  _BMDAudioSampleRate = TOleEnum;
const
	bmdAudioSampleRate48kHz                                       = 48000;

(* Enum BMDAudioSampleType - Audio sample sizes supported for output/input *)
type
   _BMDAudioSampleType = TOleEnum;
const
  bmdAudioSampleType16bitInteger                                = 16;
  bmdAudioSampleType32bitInteger                                = 32;

(* Enum BMDAudioOutputStreamType - Audio output stream type *)
type
  _BMDAudioOutputStreamType = TOleEnum;
const
	bmdAudioOutputStreamContinuous                                = $00000000;
  bmdAudioOutputStreamContinuousDontResample                    = $00000001;
  bmdAudioOutputStreamTimestamped                               = $00000002;

(* Enum BMDDisplayModeSupport - Output mode supported flags *)
type
  _BMDDisplayModeSupport = TOleEnum;
const
  bmdDisplayModeNotSupported 									                  = $00000000;
  bmdDisplayModeSupported 										                  = $00000001;
  bmdDisplayModeSupportedWithConversion 						            = $00000002;
	
(* Enum BMDTimecodeFormat - Timecode formats for frame metadata *)
type
  _BMDTimecodeFormat = TOleEnum;
const
	bmdTimecodeRP188VITC1                                         = (* 'rpv1' *) $72707631;	// RP188 timecode where DBB1 equals VITC1 (line 9)
  bmdTimecodeRP188VITC2                                         = (* 'rp12' *) $72703132;	// RP188 timecode where DBB1 equals VITC2 (line 9 for progressive or line 571 for interlaced/PsF)
  bmdTimecodeRP188LTC                                           = (* 'rplt' *) $72706C74;	// RP188 timecode where DBB1 equals LTC (line 10)
  bmdTimecodeRP188Any                                           = (* 'rp18' *) $72703138;	// For capture: return the first valid timecode in {VITC1; LTC ;VITC2} - For playback: set the timecode as VITC1
  bmdTimecodeVITC                                               = (* 'vitc' *) $76697463;
  bmdTimecodeVITCField2                                         = (* 'vit2' *) $76697432;
  bmdTimecodeSerial                                             = (* 'seri' *) $73657269;

(* Enum BMDAnalogVideoFlags - Analog video display flags *)
type
  _BMDAnalogVideoFlags = TOleEnum;
const
	bmdAnalogVideoFlagCompositeSetup75                            = 1 shl 0;
  bmdAnalogVideoFlagComponentBetacamLevels                      = 1 shl 1;

(* Enum BMDAudioOutputAnalogAESSwitch - Audio output Analog/AESEBU switch *)
type
  _BMDAudioOutputAnalogAESSwitch = TOleEnum;
const
	bmdAudioOutputSwitchAESEBU                                    = (* 'aes ' *) $61657320;
  bmdAudioOutputSwitchAnalog                                    = (* 'anlg' *) $616E6C67;

(* Enum BMDVideoOutputConversionMode - Video/audio conversion mode *)
type
  _BMDVideoOutputConversionMode = TOleEnum;
const
	bmdNoVideoOutputConversion                                    = (* 'none' *) $6E6F6E65;
  bmdVideoOutputLetterboxDownconversion                         = (* 'ltbx' *) $6C746278;
  bmdVideoOutputAnamorphicDownconversion                        = (* 'amph' *) $616D7068;
  bmdVideoOutputHD720toHD1080Conversion                         = (* '720c' *) $37323063;
  bmdVideoOutputHardwareLetterboxDownconversion                 = (* 'HWlb' *) $48576C62;
  bmdVideoOutputHardwareAnamorphicDownconversion                = (* 'HWam' *) $4857616D;
  bmdVideoOutputHardwareCenterCutDownconversion                 = (* 'HWcc' *) $48576363;
  bmdVideoOutputHardware720p1080pCrossconversion                = (* 'xcap' *) $78636170;
  bmdVideoOutputHardwareAnamorphic720pUpconversion              = (* 'ua7p' *) $75613770;
  bmdVideoOutputHardwareAnamorphic1080iUpconversion             = (* 'ua1i' *) $75613169;
  bmdVideoOutputHardwareAnamorphic149To720pUpconversion         = (* 'u47p' *) $75343770;
  bmdVideoOutputHardwareAnamorphic149To1080iUpconversion        = (* 'u41i' *) $75343169;
  bmdVideoOutputHardwarePillarbox720pUpconversion               = (* 'up7p' *) $75703770;
  bmdVideoOutputHardwarePillarbox1080iUpconversion              = (* 'up1i' *) $75703169;

(* Enum BMDVideoInputConversionMode - Video input conversion mode *)
type
  _BMDVideoInputConversionMode = TOleEnum;
const
	bmdNoVideoInputConversion                                     = (* 'none' *) $6E6F6E65;
  bmdVideoInputLetterboxDownconversionFromHD1080                = (* '10lb' *) $31306C62;
  bmdVideoInputAnamorphicDownconversionFromHD1080               = (* '10am' *) $3130616D;
  bmdVideoInputLetterboxDownconversionFromHD720                 = (* '72lb' *) $37326C62;
  bmdVideoInputAnamorphicDownconversionFromHD720                = (* '72am' *) $3732616D;
  bmdVideoInputLetterboxUpconversion                            = (* 'lbup' *) $6C627570;
  bmdVideoInputAnamorphicUpconversion                           = (* 'amup' *) $616D7570;

(* Enum BMDVideo3DPackingFormat - Video 3D packing format *)
type
  _BMDVideo3DPackingFormat = TOleEnum;
const
	bmdVideo3DPackingSidebySideHalf                               = (* 'sbsh' *) $73627368;
  bmdVideo3DPackingLinebyLine                                   = (* 'lbyl' *) $6C62796C;
  bmdVideo3DPackingTopAndBottom                                 = (* 'tabo' *) $7461626F;
  bmdVideo3DPackingFramePacking                                 = (* 'frpk' *) $6672706B;
  bmdVideo3DPackingLeftOnly                                     = (* 'left' *) $6C656674;
  bmdVideo3DPackingRightOnly                                    = (* 'righ' *) $72696768;

(* Enum BMDIdleVideoOutputOperation - Video output operation when not playing video *)
type
  _BMDIdleVideoOutputOperation = TOleEnum;
const
	bmdIdleVideoOutputBlack                                       = (* 'blac' *) $626C6163;
  bmdIdleVideoOutputLastFrame                                   = (* 'lafa' *) $6C616661;

(* Enum BMDVideoEncoderFrameCodingMode - Video frame coding mode *)
type
  _BMDVideoEncoderFrameCodingMode = TOleEnum;
const
	bmdVideoEncoderFrameCodingModeInter                           = (* 'inte' *) $696E7465;
  bmdVideoEncoderFrameCodingModeIntra                           = (* 'intr' *) $696E7472;

(* Enum BMDDNxHRLevel - DNxHR Levels *)
type
  _BMDDNxHRLevel = TOleEnum;
const
	bmdDNxHRLevelSQ                                               = (* 'dnsq' *) $646E7371;
  bmdDNxHRLevelLB                                               = (* 'dnlb' *) $646E6C62;
  bmdDNxHRLevelHQ                                               = (* 'dnhq' *) $646E6871;
  bmdDNxHRLevelHQX                                              = (* 'dhqx' *) $64687178;
  bmdDNxHRLevel444                                              = (* 'd444' *) $64343434;

(* Enum BMDLinkConfiguration - Video link configuration *)
type
  _BMDLinkConfiguration = TOleEnum;
const
	bmdLinkConfigurationSingleLink                                = (* 'lcsl' *) $6C63736C;
  bmdLinkConfigurationDualLink                                  = (* 'lcdl' *) $6C63646C;
  bmdLinkConfigurationQuadLink                                  = (* 'lcql' *) $6C63716C;

(* Enum BMDDeviceInterface - Device interface type *)
type
   _BMDDeviceInterface = TOleEnum;
const
	bmdDeviceInterfacePCI                                         = (* 'pci ' *) $70636920;
  bmdDeviceInterfaceUSB                                         = (* 'usb ' *) $75736220;
  bmdDeviceInterfaceThunderbolt                                 = (* 'thun' *) $7468756E;

(* Enum BMDDeckLinkFrameMetadataID - DeckLink Frame Metadata ID *)
type
  _BMDDeckLinkFrameMetadataID = TOleEnum;
const
  bmdDeckLinkFrameMetadataHDRElectroOpticalTransferFunc         = (* 'eotf' *) $656F7466;	// EOTF in range 0-7 as per CEA 861.3
  bmdDeckLinkFrameMetadataCintelFilmType                        = (* 'cfty' *) $63667479;	// Current film type
  bmdDeckLinkFrameMetadataCintelFilmGauge                       = (* 'cfga' *) $63666761;	// Current film gauge
  bmdDeckLinkFrameMetadataCintelOffsetDetectedHorizontal        = (* 'odfh' *) $6F646668;	// Horizontal offset (pixels) detected in image
  bmdDeckLinkFrameMetadataCintelOffsetDetectedVertical          = (* 'odfv' *) $6F646676;	// Vertical offset (pixels) detected in image
  bmdDeckLinkFrameMetadataCintelOffsetAppliedHorizontal         = (* 'odah' *) $6F646168;	// Horizontal offset (pixels) applied to image
  bmdDeckLinkFrameMetadataCintelOffsetAppliedVertical           = (* 'odav' *) $6F646176;	// Vertical offset (pixels) applied to image
  bmdDeckLinkFrameMetadataCintelKeykodeLow                      = (* 'ckkl' *) $636B6B6C;	// Raw keykode value - low 64 bits
  bmdDeckLinkFrameMetadataCintelKeykodeHigh                     = (* 'ckkh' *) $636B6B68;	// Raw keykode value - high 64 bits
  bmdDeckLinkFrameMetadataCintelLinearMaskingRedInRed           = (* 'mrir' *) $6D726972;	// Red in red linear masking parameter
  bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInRed         = (* 'mgir' *) $6D676972;	// Green in red linear masking parameter
  bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInRed          = (* 'mbir' *) $6D626972;	// Blue in red linear masking parameter
  bmdDeckLinkFrameMetadataCintelLinearMaskingRedInGreen         = (* 'mrig' *) $6D726967;	// Red in green linear masking parameter
  bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInGreen       = (* 'mgig' *) $6D676967;	// Green in green linear masking parameter
  bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInGreen        = (* 'mbig' *) $6D626967;	// Blue in green linear masking parameter
  bmdDeckLinkFrameMetadataCintelLinearMaskingRedInBlue          = (* 'mrib' *) $6D726962;	// Red in blue linear masking parameter
  bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInBlue        = (* 'mgib' *) $6D676962;	// Green in blue linear masking parameter
  bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInBlue         = (* 'mbib' *) $6D626962;	// Blue in blue linear masking parameter
  bmdDeckLinkFrameMetadataCintelLogMaskingRedInRed              = (* 'mlrr' *) $6D6C7272;	// Red in red log masking parameter
  bmdDeckLinkFrameMetadataCintelLogMaskingGreenInRed            = (* 'mlgr' *) $6D6C6772;	// Green in red log masking parameter
  bmdDeckLinkFrameMetadataCintelLogMaskingBlueInRed             = (* 'mlbr' *) $6D6C6272;	// Blue in red log masking parameter
  bmdDeckLinkFrameMetadataCintelLogMaskingRedInGreen            = (* 'mlrg' *) $6D6C7267;	// Red in green log masking parameter
  bmdDeckLinkFrameMetadataCintelLogMaskingGreenInGreen          = (* 'mlgg' *) $6D6C6767;	// Green in green log masking parameter
  bmdDeckLinkFrameMetadataCintelLogMaskingBlueInGreen           = (* 'mlbg' *) $6D6C6267;	// Blue in green log masking parameter
  bmdDeckLinkFrameMetadataCintelLogMaskingRedInBlue             = (* 'mlrb' *) $6D6C7262;	// Red in blue log masking parameter
  bmdDeckLinkFrameMetadataCintelLogMaskingGreenInBlue           = (* 'mlgb' *) $6D6C6762;	// Green in blue log masking parameter
  bmdDeckLinkFrameMetadataCintelLogMaskingBlueInBlue            = (* 'mlbb' *) $6D6C6262;	// Blue in blue log masking parameter
  bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedX               = (* 'hdrx' *) $68647278;	// Red display primaries in range 0.0 - 1.0
  bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedY               = (* 'hdry' *) $68647279;	// Red display primaries in range 0.0 - 1.0
  bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenX             = (* 'hdgx' *) $68646778;	// Green display primaries in range 0.0 - 1.0
  bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenY             = (* 'hdgy' *) $68646779;	// Green display primaries in range 0.0 - 1.0
  bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueX              = (* 'hdbx' *) $68646278;	// Blue display primaries in range 0.0 - 1.0
  bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueY              = (* 'hdby' *) $68646279;	// Blue display primaries in range 0.0 - 1.0
  bmdDeckLinkFrameMetadataHDRWhitePointX                        = (* 'hdwx' *) $68647778;	// White point in range 0.0 - 1.0
  bmdDeckLinkFrameMetadataHDRWhitePointY                        = (* 'hdwy' *) $68647779;	// White point in range 0.0 - 1.0
  bmdDeckLinkFrameMetadataHDRMaxDisplayMasteringLuminance       = (* 'hdml' *) $68646D6C;	// Max display mastering luminance in range 1 cd/m2 - 65535 cd/m2
  bmdDeckLinkFrameMetadataHDRMinDisplayMasteringLuminance       = (* 'hmil' *) $686D696C;	// Min display mastering luminance in range 0.0001 cd/m2 - 6.5535 cd/m2
  bmdDeckLinkFrameMetadataHDRMaximumContentLightLevel           = (* 'mcll' *) $6D636C6C;	// Maximum Content Light Level in range 1 cd/m2 - 65535 cd/m2
  bmdDeckLinkFrameMetadataHDRMaximumFrameAverageLightLevel      = (* 'fall' *) $66616C6C;	// Maximum Frame Average Light Level in range 1 cd/m2 - 65535 cd/m2
  bmdDeckLinkFrameMetadataCintel16mmCropRequired                = (* 'c16c' *) $63313663;	// The image should be cropped to 16mm size
  bmdDeckLinkFrameMetadataCintelInversionRequired               = (* 'cinv' *) $63696E76;	// The image should be colour inverted
  bmdDeckLinkFrameMetadataCintelFlipRequired                    = (* 'cflr' *) $63666C72;	// The image should be flipped horizontally
  bmdDeckLinkFrameMetadataCintelFocusAssistEnabled              = (* 'cfae' *) $63666165;	// Focus Assist is currently enabled
  bmdDeckLinkFrameMetadataCintelKeykodeIsInterpolated           = (* 'kkii' *) $6B6B6969;	// The keykode for this frame is interpolated from nearby keykodes

(* Enum BMDDuplexMode - Duplex for configurable ports *)
type
  _BMDDuplexMode = TOleEnum;
const
	bmdDuplexModeFull                                             = (* 'fdup' *) $66647570;
  bmdDuplexModeHalf                                             = (* 'hdup' *) $68647570;

(* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID *)
type
  _BMDDeckLinkAttributeID = TOleEnum;
const
	(* Flags *)
  BMDDeckLinkSupportsInternalKeying                             = (* 'keyi' *) $6B657969;
  BMDDeckLinkSupportsExternalKeying                             = (* 'keye' *) $6B657965;
  BMDDeckLinkSupportsHDKeying                                   = (* 'keyh' *) $6B657968;
  BMDDeckLinkSupportsInputFormatDetection                       = (* 'infd' *) $696E6664;
  BMDDeckLinkHasReferenceInput                                  = (* 'hrin' *) $6872696E;
  BMDDeckLinkHasSerialPort                                      = (* 'hspt' *) $68737074;
  BMDDeckLinkHasAnalogVideoOutputGain                           = (* 'avog' *) $61766F67;
  BMDDeckLinkCanOnlyAdjustOverallVideoOutputGain                = (* 'ovog' *) $6F766F67;
  BMDDeckLinkHasVideoInputAntiAliasingFilter                    = (* 'aafl' *) $6161666C;
  BMDDeckLinkHasBypass                                          = (* 'byps' *) $62797073;
  BMDDeckLinkSupportsClockTimingAdjustment                      = (* 'ctad' *) $63746164;
  BMDDeckLinkSupportsFullDuplex                                 = (* 'fdup' *) $66647570;
  BMDDeckLinkSupportsFullFrameReferenceInputTimingOffset        = (* 'frin' *) $6672696E;
  BMDDeckLinkSupportsSMPTELevelAOutput                          = (* 'lvla' *) $6C766C61;
  BMDDeckLinkSupportsDualLinkSDI                                = (* 'sdls' *) $73646C73;
  BMDDeckLinkSupportsQuadLinkSDI                                = (* 'sqls' *) $73716C73;
  BMDDeckLinkSupportsIdleOutput                                 = (* 'idou' *) $69646F75;
  BMDDeckLinkHasLTCTimecodeInput                                = (* 'hltc' *) $686C7463;
  BMDDeckLinkSupportsDuplexModeConfiguration                    = (* 'dupx' *) $64757078;
  BMDDeckLinkSupportsHDRMetadata                                = (* 'hdrm' *) $6864726D;
  (* Integers *)
  BMDDeckLinkMaximumAudioChannels                               = (* 'mach' *) $6D616368;
  BMDDeckLinkMaximumAnalogAudioInputChannels 					= (* 'iach' *) $69616368;
  BMDDeckLinkMaximumAnalogAudioOutputChannels                   = (* 'aach' *) $61616368;
  BMDDeckLinkNumberOfSubDevices                                 = (* 'nsbd' *) $6E736264;
  BMDDeckLinkSubDeviceIndex                                     = (* 'subi' *) $73756269;
  BMDDeckLinkPersistentID                                       = (* 'peid' *) $70656964;
  BMDDeckLinkDeviceGroupID                                      = (* 'dgid' *) $64676964;
  BMDDeckLinkTopologicalID                                      = (* 'toid' *) $746F6964;
  BMDDeckLinkVideoOutputConnections                             = (* 'vocn' *) $766F636E;	// Returns a BMDVideoConnection bit field
  BMDDeckLinkVideoInputConnections                              = (* 'vicn' *) $7669636E;	// Returns a BMDVideoConnection bit field
  BMDDeckLinkAudioOutputConnections                             = (* 'aocn' *) $616F636E;	// Returns a BMDAudioConnection bit field
  BMDDeckLinkAudioInputConnections                              = (* 'aicn' *) $6169636E;	// Returns a BMDAudioConnection bit field
  BMDDeckLinkVideoIOSupport                                     = (* 'vios' *) $76696F73;	// Returns a BMDVideoIOSupport bit field
  BMDDeckLinkDeckControlConnections                             = (* 'dccn' *) $6463636E;	// Returns a BMDDeckControlConnection bit field
  BMDDeckLinkDeviceInterface                                    = (* 'dbus' *) $64627573;	// Returns a BMDDeviceInterface
  BMDDeckLinkAudioInputRCAChannelCount                          = (* 'airc' *) $61697263;
  BMDDeckLinkAudioInputXLRChannelCount                          = (* 'aixc' *) $61697863;
  BMDDeckLinkAudioOutputRCAChannelCount                         = (* 'aorc' *) $616F7263;
  BMDDeckLinkAudioOutputXLRChannelCount                         = (* 'aoxc' *) $616F7863;
  BMDDeckLinkPairedDevicePersistentID                           = (* 'ppid' *) $70706964;
  (* Floats *)
  BMDDeckLinkVideoInputGainMinimum                              = (* 'vigm' *) $7669676D;
  BMDDeckLinkVideoInputGainMaximum                              = (* 'vigx' *) $76696778;
  BMDDeckLinkVideoOutputGainMinimum                             = (* 'vogm' *) $766F676D;
  BMDDeckLinkVideoOutputGainMaximum                             = (* 'vogx' *) $766F6778;
  BMDDeckLinkMicrophoneInputGainMinimum                         = (* 'migm' *) $6D69676D;
  BMDDeckLinkMicrophoneInputGainMaximum                         = (* 'migx' *) $6D696778;
  (* Strings *)
  BMDDeckLinkSerialPortDeviceName                               = (* 'slpn' *) $736C706E;
  BMDDeckLinkVendorName                                         = (* 'vndr' *) $766E6472;
  BMDDeckLinkDisplayName                                        = (* 'dspn' *) $6473706E;
  BMDDeckLinkModelName                                          = (* 'mdln' *) $6D646C6E;
  BMDDeckLinkDeviceHandle                                       = (* 'devh' *) $64657668;

(* Enum BMDDeckLinkAPIInformationID - DeckLinkAPI information ID *)
type
  _BMDDeckLinkAPIInformationID = TOleEnum;
const
	BMDDeckLinkAPIVersion                                         = (* 'vers' *) $76657273;

(* Enum BMDDeckLinkStatusID - DeckLink Status ID *)
type
  _BMDDeckLinkStatusID = TOleEnum;
const
	(* Integers *)
  bmdDeckLinkStatusDetectedVideoInputMode                       = (* 'dvim' *) $6476696D;
  bmdDeckLinkStatusDetectedVideoInputFlags                      = (* 'dvif' *) $64766966;
  bmdDeckLinkStatusCurrentVideoInputMode                        = (* 'cvim' *) $6376696D;
  bmdDeckLinkStatusCurrentVideoInputPixelFormat                 = (* 'cvip' *) $63766970;
  bmdDeckLinkStatusCurrentVideoInputFlags                       = (* 'cvif' *) $63766966;
  bmdDeckLinkStatusCurrentVideoOutputMode                       = (* 'cvom' *) $63766F6D;
  bmdDeckLinkStatusCurrentVideoOutputFlags                      = (* 'cvof' *) $63766F66;
  bmdDeckLinkStatusPCIExpressLinkWidth                          = (* 'pwid' *) $70776964;
  bmdDeckLinkStatusPCIExpressLinkSpeed                          = (* 'plnk' *) $706C6E6B;
  bmdDeckLinkStatusLastVideoOutputPixelFormat                   = (* 'opix' *) $6F706978;
  bmdDeckLinkStatusReferenceSignalMode                          = (* 'refm' *) $7265666D;
  bmdDeckLinkStatusReferenceSignalFlags                         = (* 'reff' *) $72656666;
  bmdDeckLinkStatusDuplexMode                                   = (* 'dupx' *) $64757078;
  bmdDeckLinkStatusBusy                                         = (* 'busy' *) $62757379;
  (* Flags *)
  bmdDeckLinkStatusVideoInputSignalLocked                       = (* 'visl' *) $7669736C;
  bmdDeckLinkStatusReferenceSignalLocked                        = (* 'refl' *) $7265666C;
  bmdDeckLinkStatusReceivedEDID									= (* 'edid' *) $65646964;
	
(* Enum BMDDeckLinkVideoStatusFlags -  *)
type
  _BMDDeckLinkVideoStatusFlags = TOleEnum;
const
	bmdDeckLinkVideoStatusPsF                                     = 1 shl 0;
  bmdDeckLinkVideoStatusDualStream3D                            = 1 shl 1;

(* Enum BMDDuplexStatus - Duplex status of the device *)
type
  _BMDDuplexStatus = TOleEnum;
const
	bmdDuplexStatusFullDuplex                                     = (* 'fdup' *) $66647570;
  bmdDuplexStatusHalfDuplex                                     = (* 'hdup' *) $68647570;
  bmdDuplexStatusSimplex                                        = (* 'splx' *) $73706C78;
  bmdDuplexStatusInactive                                       = (* 'inac' *) $696E6163;
   
(* Enum BMDPanelType - The type of interchangeable panel *)
type
  _BMDPanelType = TOleEnum;
const
  bmdPanelNotDetected                                     		= (* 'npnl' *) $6E706E6C;
  bmdPanelTeranexMiniSmartPanel									= (* 'tmsm' *) $746D736D;

(* Enum BMDDeviceBusyState - Current device busy state *)
type
  _BMDDeviceBusyState = TOleEnum;
const
	bmdDeviceCaptureBusy                                          = 1 shl 0;
  bmdDevicePlaybackBusy                                         = 1 shl 1;
  bmdDeviceSerialPortBusy                                       = 1 shl 2;

(* Enum BMDVideoIOSupport - Device video input/output support *)
type
  _BMDVideoIOSupport = TOleEnum;
const
	bmdDeviceSupportsCapture                                      = 1 shl 0;
  bmdDeviceSupportsPlayback                                     = 1 shl 1;

(* Enum BMD3DPreviewFormat - Linked Frame preview format *)
type
  _BMD3DPreviewFormat = TOleEnum;
const
	bmd3DPreviewFormatDefault                                     = (* 'defa' *) $64656661;
  bmd3DPreviewFormatLeftOnly                                    = (* 'left' *) $6C656674;
  bmd3DPreviewFormatRightOnly                                   = (* 'righ' *) $72696768;
  bmd3DPreviewFormatSideBySide                                  = (* 'side' *) $73696465;
  bmd3DPreviewFormatTopBottom                                   = (* 'topb' *) $746F7062;

(* Enum BMDNotifications - Events that can be subscribed through IDeckLinkNotification *)
type
  _BMDNotifications = TOleEnum;
const
	bmdPreferencesChanged                                         = (* 'pref' *) $70726566;
  bmdStatusChanged                                              = (* 'stat' *) $73746174;

// Forward Declarations
type
  IDeckLinkVideoOutputCallback = interface;
  IDeckLinkVideoFrame = interface;
  IDeckLinkVideoFrameAncillary = interface;
  IDeckLinkInputCallback = interface;
  IDeckLinkVideoInputFrame = interface;
  IDeckLinkAudioInputPacket = interface;
  IDeckLinkEncoderInputCallback = interface;
  IDeckLinkEncoderPacket = interface;
  IDeckLinkEncoderVideoPacket = interface;
  IDeckLinkEncoderAudioPacket = interface;
  IDeckLinkMemoryAllocator = interface;
  IDeckLinkAudioOutputCallback = interface;
  IDeckLinkIterator = interface;
  IDeckLinkAPIInformation = interface;
  IDeckLinkOutput = interface;
  IDeckLinkScreenPreviewCallback = interface;
  IDeckLinkMutableVideoFrame = interface;
  IDeckLinkInput = interface;
  IDeckLinkEncoderInput = interface;
  IDeckLinkVideoFrame3DExtensions = interface;
  IDeckLinkVideoFrameMetadataExtensions = interface;
  IDeckLinkH265NALPacket = interface;
  IDeckLinkGLScreenPreviewHelper = interface;
  IDeckLinkDX9ScreenPreviewHelper = interface;
  IDeckLinkNotificationCallback = interface;
  IDeckLinkNotification = interface;
  IDeckLinkAttributes = interface;
  IDeckLinkStatus = interface;
  IDeckLinkKeyer = interface;
  IDeckLinkVideoConversion = interface;
  IDeckLinkDeviceNotificationCallback = interface;
  IDeckLinkDiscovery = interface;

// *********************************************************************//
// Interface: IDeckLinkVideoOutputCallback
// Flags:     (0)
// GUID:      {20AA5225-1958-47CB-820B-80A8D521A6EE}
// *********************************************************************//
  IDeckLinkVideoOutputCallback = interface(IUnknown)
    ['{20AA5225-1958-47CB-820B-80A8D521A6EE}']
    function ScheduledFrameCompleted(const completedFrame: IDeckLinkVideoFrame;
                                     result: _BMDOutputFrameCompletionResult): HResult; stdcall;
    function ScheduledPlaybackHasStopped: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkVideoFrame
// Flags:     (0)
// GUID:      {3F716FE0-F023-4111-BE5D-EF4414C05B17}
// *********************************************************************//
  IDeckLinkVideoFrame = interface(IUnknown)
    ['{3F716FE0-F023-4111-BE5D-EF4414C05B17}']
    function GetWidth: Integer; stdcall;
    function GetHeight: Integer; stdcall;
    function GetRowBytes: Integer; stdcall;
    function GetPixelFormat: _BMDPixelFormat; stdcall;
    function GetFlags: _BMDFrameFlags; stdcall;
    function GetBytes(out buffer: Pointer): HResult; stdcall;
    function GetTimecode(format: _BMDTimecodeFormat; out timecode: IDeckLinkTimecode): HResult; stdcall;
    function GetAncillaryData(out ancillary: IDeckLinkVideoFrameAncillary): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkVideoFrameAncillary
// Flags:     (0)
// GUID:      {732E723C-D1A4-4E29-9E8E-4A88797A0004}
// *********************************************************************//
  IDeckLinkVideoFrameAncillary = interface(IUnknown)
    ['{732E723C-D1A4-4E29-9E8E-4A88797A0004}']
    function GetBufferForVerticalBlankingLine(lineNumber: SYSUINT; out buffer: Pointer): HResult; stdcall;
    function GetPixelFormat: _BMDPixelFormat; stdcall;
    function GetDisplayMode: _BMDDisplayMode; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkInputCallback
// Flags:     (0)
// GUID:      {DD04E5EC-7415-42AB-AE4A-E80C4DFC044A}
// *********************************************************************//
  IDeckLinkInputCallback = interface(IUnknown)
    ['{DD04E5EC-7415-42AB-AE4A-E80C4DFC044A}']
    function VideoInputFormatChanged(notificationEvents: _BMDVideoInputFormatChangedEvents; 
                                     const newDisplayMode: IDeckLinkDisplayMode; 
                                     detectedSignalFlags: _BMDDetectedVideoInputFormatFlags): HResult; stdcall;
    function VideoInputFrameArrived(const videoFrame: IDeckLinkVideoInputFrame; 
                                    const audioPacket: IDeckLinkAudioInputPacket): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkVideoInputFrame
// Flags:     (0)
// GUID:      {05CFE374-537C-4094-9A57-680525118F44}
// *********************************************************************//
  IDeckLinkVideoInputFrame = interface(IDeckLinkVideoFrame)
    ['{05CFE374-537C-4094-9A57-680525118F44}']
    function GetStreamTime(out frameTime: Int64; out frameDuration: Int64; timeScale: Int64): HResult; stdcall;
    function GetHardwareReferenceTimestamp(timeScale: Int64; out frameTime: Int64; 
                                           out frameDuration: Int64): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkAudioInputPacket
// Flags:     (0)
// GUID:      {E43D5870-2894-11DE-8C30-0800200C9A66}
// *********************************************************************//
  IDeckLinkAudioInputPacket = interface(IUnknown)
    ['{E43D5870-2894-11DE-8C30-0800200C9A66}']
    function GetSampleFrameCount: Integer; stdcall;
    function GetBytes(out buffer: Pointer): HResult; stdcall;
    function GetPacketTime(out packetTime: Int64; timeScale: Int64): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkEncoderInputCallback
// Flags:     (0)
// GUID:      {ACF13E61-F4A0-4974-A6A7-59AFF6268B31}
// *********************************************************************//
  IDeckLinkEncoderInputCallback = interface(IUnknown)
    ['{ACF13E61-F4A0-4974-A6A7-59AFF6268B31}']
    function VideoInputSignalChanged(notificationEvents: _BMDVideoInputFormatChangedEvents; 
                                     const newDisplayMode: IDeckLinkDisplayMode; 
                                     detectedSignalFlags: _BMDDetectedVideoInputFormatFlags): HResult; stdcall;
    function VideoPacketArrived(const videoPacket: IDeckLinkEncoderVideoPacket): HResult; stdcall;
    function AudioPacketArrived(const audioPacket: IDeckLinkEncoderAudioPacket): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkEncoderPacket
// Flags:     (0)
// GUID:      {B693F36C-316E-4AF1-B6C2-F389A4BCA620}
// *********************************************************************//
  IDeckLinkEncoderPacket = interface(IUnknown)
    ['{B693F36C-316E-4AF1-B6C2-F389A4BCA620}']
    function GetBytes(out buffer: Pointer): HResult; stdcall;
    function GetSize: Integer; stdcall;
    function GetStreamTime(out frameTime: Int64; timeScale: Int64): HResult; stdcall;
    function GetPacketType: _BMDPacketType; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkEncoderVideoPacket
// Flags:     (0)
// GUID:      {4E7FD944-E8C7-4EAC-B8C0-7B77F80F5AE0}
// *********************************************************************//
  IDeckLinkEncoderVideoPacket = interface(IDeckLinkEncoderPacket)
    ['{4E7FD944-E8C7-4EAC-B8C0-7B77F80F5AE0}']
    function GetPixelFormat: _BMDPixelFormat; stdcall;
    function GetHardwareReferenceTimestamp(timeScale: Int64; out frameTime: Int64; 
                                           out frameDuration: Int64): HResult; stdcall;
    function GetTimecode(format: _BMDTimecodeFormat; out timecode: IDeckLinkTimecode): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkEncoderAudioPacket
// Flags:     (0)
// GUID:      {49E8EDC8-693B-4E14-8EF6-12C658F5A07A}
// *********************************************************************//
  IDeckLinkEncoderAudioPacket = interface(IDeckLinkEncoderPacket)
    ['{49E8EDC8-693B-4E14-8EF6-12C658F5A07A}']
    function GetAudioFormat: _BMDAudioFormat; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkMemoryAllocator
// Flags:     (0)
// GUID:      {B36EB6E7-9D29-4AA8-92EF-843B87A289E8}
// *********************************************************************//
  IDeckLinkMemoryAllocator = interface(IUnknown)
    ['{B36EB6E7-9D29-4AA8-92EF-843B87A289E8}']
    function AllocateBuffer(bufferSize: SYSUINT; out allocatedBuffer: Pointer): HResult; stdcall;
    function ReleaseBuffer(buffer: Pointer): HResult; stdcall;
    function Commit: HResult; stdcall;
    function Decommit: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkAudioOutputCallback
// Flags:     (0)
// GUID:      {403C681B-7F46-4A12-B993-2BB127084EE6}
// *********************************************************************//
  IDeckLinkAudioOutputCallback = interface(IUnknown)
    ['{403C681B-7F46-4A12-B993-2BB127084EE6}']
    function RenderAudioSamples(preroll: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkIterator
// Flags:     (0)
// GUID:      {50FB36CD-3063-4B73-BDBB-958087F2D8BA}
// *********************************************************************//
  IDeckLinkIterator = interface(IUnknown)
    ['{50FB36CD-3063-4B73-BDBB-958087F2D8BA}']
    function Next(out deckLinkInstance: IDeckLink): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkAPIInformation
// Flags:     (0)
// GUID:      {7BEA3C68-730D-4322-AF34-8A7152B532A4}
// *********************************************************************//
  IDeckLinkAPIInformation = interface(IUnknown)
    ['{7BEA3C68-730D-4322-AF34-8A7152B532A4}']
    function GetFlag(cfgID: _BMDDeckLinkAPIInformationID; out value: Integer): HResult; stdcall;
    function GetInt(cfgID: _BMDDeckLinkAPIInformationID; out value: Int64): HResult; stdcall;
    function GetFloat(cfgID: _BMDDeckLinkAPIInformationID; out value: Double): HResult; stdcall;
    function GetString(cfgID: _BMDDeckLinkAPIInformationID; out value: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkOutput
// Flags:     (0)
// GUID:      {CC5C8A6E-3F2F-4B3A-87EA-FD78AF300564}
// *********************************************************************//
  IDeckLinkOutput = interface(IUnknown)
    ['{CC5C8A6E-3F2F-4B3A-87EA-FD78AF300564}']
    function DoesSupportVideoMode(displayMode: _BMDDisplayMode; pixelFormat: _BMDPixelFormat; 
                                  flags: _BMDVideoOutputFlags; out result: _BMDDisplayModeSupport; 
                                  out resultDisplayMode: IDeckLinkDisplayMode): HResult; stdcall;
    function GetDisplayModeIterator(out iterator: IDeckLinkDisplayModeIterator): HResult; stdcall;
    function SetScreenPreviewCallback(const previewCallback: IDeckLinkScreenPreviewCallback): HResult; stdcall;
    function EnableVideoOutput(displayMode: _BMDDisplayMode; flags: _BMDVideoOutputFlags): HResult; stdcall;
    function DisableVideoOutput: HResult; stdcall;
    function SetVideoOutputFrameMemoryAllocator(const theAllocator: IDeckLinkMemoryAllocator): HResult; stdcall;
    function CreateVideoFrame(width: SYSINT; height: SYSINT; rowBytes: SYSINT; 
                              pixelFormat: _BMDPixelFormat; flags: _BMDFrameFlags; 
                              out outFrame: IDeckLinkMutableVideoFrame): HResult; stdcall;
    function CreateAncillaryData(pixelFormat: _BMDPixelFormat; 
                                 out outBuffer: IDeckLinkVideoFrameAncillary): HResult; stdcall;
    function DisplayVideoFrameSync(const theFrame: IDeckLinkVideoFrame): HResult; stdcall;
    function ScheduleVideoFrame(const theFrame: IDeckLinkVideoFrame; displayTime: Int64; 
                                displayDuration: Int64; timeScale: Int64): HResult; stdcall;
    function SetScheduledFrameCompletionCallback(const theCallback: IDeckLinkVideoOutputCallback): HResult; stdcall;
    function GetBufferedVideoFrameCount(out bufferedFrameCount: SYSUINT): HResult; stdcall;
    function EnableAudioOutput(sampleRate: _BMDAudioSampleRate; sampleType: _BMDAudioSampleType; 
                               channelCount: SYSUINT; streamType: _BMDAudioOutputStreamType): HResult; stdcall;
    function DisableAudioOutput: HResult; stdcall;
    function WriteAudioSamplesSync(buffer: Pointer; sampleFrameCount: SYSUINT; 
                                   out sampleFramesWritten: SYSUINT): HResult; stdcall;
    function BeginAudioPreroll: HResult; stdcall;
    function EndAudioPreroll: HResult; stdcall;
    function ScheduleAudioSamples(buffer: Pointer; sampleFrameCount: SYSUINT; streamTime: Int64; 
                                  timeScale: Int64; out sampleFramesWritten: SYSUINT): HResult; stdcall;
    function GetBufferedAudioSampleFrameCount(out bufferedSampleFrameCount: SYSUINT): HResult; stdcall;
    function FlushBufferedAudioSamples: HResult; stdcall;
    function SetAudioCallback(const theCallback: IDeckLinkAudioOutputCallback): HResult; stdcall;
    function StartScheduledPlayback(playbackStartTime: Int64; timeScale: Int64; 
                                    playbackSpeed: Double): HResult; stdcall;
    function StopScheduledPlayback(stopPlaybackAtTime: Int64; out actualStopTime: Int64; 
                                   timeScale: Int64): HResult; stdcall;
    function IsScheduledPlaybackRunning(out active: Integer): HResult; stdcall;
    function GetScheduledStreamTime(desiredTimeScale: Int64; out streamTime: Int64; 
                                    out playbackSpeed: Double): HResult; stdcall;
    function GetReferenceStatus(out referenceStatus: _BMDReferenceStatus): HResult; stdcall;
    function GetHardwareReferenceClock(desiredTimeScale: Int64; out hardwareTime: Int64; 
                                       out timeInFrame: Int64; out ticksPerFrame: Int64): HResult; stdcall;
    function GetFrameCompletionReferenceTimestamp(const theFrame: IDeckLinkVideoFrame; 
                                                  desiredTimeScale: Int64; 
                                                  out frameCompletionTimestamp: Int64): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkScreenPreviewCallback
// Flags:     (0)
// GUID:      {B1D3F49A-85FE-4C5D-95C8-0B5D5DCCD438}
// *********************************************************************//
  IDeckLinkScreenPreviewCallback = interface(IUnknown)
    ['{B1D3F49A-85FE-4C5D-95C8-0B5D5DCCD438}']
    function DrawFrame(const theFrame: IDeckLinkVideoFrame): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkMutableVideoFrame
// Flags:     (0)
// GUID:      {69E2639F-40DA-4E19-B6F2-20ACE815C390}
// *********************************************************************//
  IDeckLinkMutableVideoFrame = interface(IDeckLinkVideoFrame)
    ['{69E2639F-40DA-4E19-B6F2-20ACE815C390}']
    function SetFlags(newFlags: _BMDFrameFlags): HResult; stdcall;
    function SetTimecode(format: _BMDTimecodeFormat; const timecode: IDeckLinkTimecode): HResult; stdcall;
    function SetTimecodeFromComponents(format: _BMDTimecodeFormat; hours: Byte; minutes: Byte; 
                                       seconds: Byte; frames: Byte; flags: _BMDTimecodeFlags): HResult; stdcall;
    function SetAncillaryData(const ancillary: IDeckLinkVideoFrameAncillary): HResult; stdcall;
    function SetTimecodeUserBits(format: _BMDTimecodeFormat; userBits: SYSUINT): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkInput
// Flags:     (0)
// GUID:      {AF22762B-DFAC-4846-AA79-FA8883560995}
// *********************************************************************//
  IDeckLinkInput = interface(IUnknown)
    ['{AF22762B-DFAC-4846-AA79-FA8883560995}']
    function DoesSupportVideoMode(displayMode: _BMDDisplayMode; pixelFormat: _BMDPixelFormat; 
                                  flags: _BMDVideoInputFlags; out result: _BMDDisplayModeSupport; 
                                  out resultDisplayMode: IDeckLinkDisplayMode): HResult; stdcall;
    function GetDisplayModeIterator(out iterator: IDeckLinkDisplayModeIterator): HResult; stdcall;
    function SetScreenPreviewCallback(const previewCallback: IDeckLinkScreenPreviewCallback): HResult; stdcall;
    function EnableVideoInput(displayMode: _BMDDisplayMode; pixelFormat: _BMDPixelFormat; 
                              flags: _BMDVideoInputFlags): HResult; stdcall;
    function DisableVideoInput: HResult; stdcall;
    function GetAvailableVideoFrameCount(out availableFrameCount: SYSUINT): HResult; stdcall;
    function SetVideoInputFrameMemoryAllocator(const theAllocator: IDeckLinkMemoryAllocator): HResult; stdcall;
    function EnableAudioInput(sampleRate: _BMDAudioSampleRate; sampleType: _BMDAudioSampleType; 
                              channelCount: SYSUINT): HResult; stdcall;
    function DisableAudioInput: HResult; stdcall;
    function GetAvailableAudioSampleFrameCount(out availableSampleFrameCount: SYSUINT): HResult; stdcall;
    function StartStreams: HResult; stdcall;
    function StopStreams: HResult; stdcall;
    function PauseStreams: HResult; stdcall;
    function FlushStreams: HResult; stdcall;
    function SetCallback(const theCallback: IDeckLinkInputCallback): HResult; stdcall;
    function GetHardwareReferenceClock(desiredTimeScale: Int64; out hardwareTime: Int64; 
                                       out timeInFrame: Int64; out ticksPerFrame: Int64): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkEncoderInput
// Flags:     (0)
// GUID:      {270587DA-6B7D-42E7-A1F0-6D853F581185}
// *********************************************************************//
  IDeckLinkEncoderInput = interface(IUnknown)
    ['{270587DA-6B7D-42E7-A1F0-6D853F581185}']
    function DoesSupportVideoMode(displayMode: _BMDDisplayMode; pixelFormat: _BMDPixelFormat; 
                                  flags: _BMDVideoInputFlags; out result: _BMDDisplayModeSupport; 
                                  out resultDisplayMode: IDeckLinkDisplayMode): HResult; stdcall;
    function GetDisplayModeIterator(out iterator: IDeckLinkDisplayModeIterator): HResult; stdcall;
    function EnableVideoInput(displayMode: _BMDDisplayMode; pixelFormat: _BMDPixelFormat; 
                              flags: _BMDVideoInputFlags): HResult; stdcall;
    function DisableVideoInput: HResult; stdcall;
    function GetAvailablePacketsCount(out availablePacketsCount: SYSUINT): HResult; stdcall;
    function SetMemoryAllocator(const theAllocator: IDeckLinkMemoryAllocator): HResult; stdcall;
    function EnableAudioInput(audioFormat: _BMDAudioFormat; sampleRate: _BMDAudioSampleRate; 
                              sampleType: _BMDAudioSampleType; channelCount: SYSUINT): HResult; stdcall;
    function DisableAudioInput: HResult; stdcall;
    function GetAvailableAudioSampleFrameCount(out availableSampleFrameCount: SYSUINT): HResult; stdcall;
    function StartStreams: HResult; stdcall;
    function StopStreams: HResult; stdcall;
    function PauseStreams: HResult; stdcall;
    function FlushStreams: HResult; stdcall;
    function SetCallback(const theCallback: IDeckLinkEncoderInputCallback): HResult; stdcall;
    function GetHardwareReferenceClock(desiredTimeScale: Int64; out hardwareTime: Int64; 
                                       out timeInFrame: Int64; out ticksPerFrame: Int64): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkVideoFrame3DExtensions
// Flags:     (0)
// GUID:      {DA0F7E4A-EDC7-48A8-9CDD-2DB51C729CD7}
// *********************************************************************//
  IDeckLinkVideoFrame3DExtensions = interface(IUnknown)
    ['{DA0F7E4A-EDC7-48A8-9CDD-2DB51C729CD7}']
    function Get3DPackingFormat: _BMDVideo3DPackingFormat; stdcall;
    function GetFrameForRightEye(out rightEyeFrame: IDeckLinkVideoFrame): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkVideoFrameMetadataExtensions
// Flags:     (0)
// GUID:      {D5973DC9-6432-46D0-8F0B-2496F8A1238F}
// *********************************************************************//
  IDeckLinkVideoFrameMetadataExtensions = interface(IUnknown)
    ['{D5973DC9-6432-46D0-8F0B-2496F8A1238F}']
    function GetInt(metadataID: _BMDDeckLinkFrameMetadataID; out value: Int64): HResult; stdcall;
    function GetFloat(metadataID: _BMDDeckLinkFrameMetadataID; out value: Double): HResult; stdcall;
    function GetFlag(metadataID: _BMDDeckLinkFrameMetadataID; out value: Integer): HResult; stdcall;
    function GetString(metadataID: _BMDDeckLinkFrameMetadataID; out value: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkH265NALPacket
// Flags:     (0)
// GUID:      {639C8E0B-68D5-4BDE-A6D4-95F3AEAFF2E7}
// *********************************************************************//
  IDeckLinkH265NALPacket = interface(IDeckLinkEncoderVideoPacket)
    ['{639C8E0B-68D5-4BDE-A6D4-95F3AEAFF2E7}']
    function GetUnitType(out unitType: Byte): HResult; stdcall;
    function GetBytesNoPrefix(out buffer: Pointer): HResult; stdcall;
    function GetSizeNoPrefix: Integer; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkGLScreenPreviewHelper
// Flags:     (0)
// GUID:      {504E2209-CAC7-4C1A-9FB4-C5BB6274D22F}
// *********************************************************************//
  IDeckLinkGLScreenPreviewHelper = interface(IUnknown)
    ['{504E2209-CAC7-4C1A-9FB4-C5BB6274D22F}']
    function InitializeGL: HResult; stdcall;
    function PaintGL: HResult; stdcall;
    function SetFrame(const theFrame: IDeckLinkVideoFrame): HResult; stdcall;
    function Set3DPreviewFormat(previewFormat: _BMD3DPreviewFormat): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkDX9ScreenPreviewHelper
// Flags:     (0)
// GUID:      {2094B522-D1A1-40C0-9AC7-1C012218EF02}
// *********************************************************************//
  IDeckLinkDX9ScreenPreviewHelper = interface(IUnknown)
    ['{2094B522-D1A1-40C0-9AC7-1C012218EF02}']
    function Initialize(device: Pointer): HResult; stdcall;
    function Render(var rc: tagRECT): HResult; stdcall;
    function SetFrame(const theFrame: IDeckLinkVideoFrame): HResult; stdcall;
    function Set3DPreviewFormat(previewFormat: _BMD3DPreviewFormat): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkNotificationCallback
// Flags:     (0)
// GUID:      {B002A1EC-070D-4288-8289-BD5D36E5FF0D}
// *********************************************************************//
  IDeckLinkNotificationCallback = interface(IUnknown)
    ['{B002A1EC-070D-4288-8289-BD5D36E5FF0D}']
    function Notify(topic: _BMDNotifications; param1: Largeuint; param2: Largeuint): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkNotification
// Flags:     (0)
// GUID:      {0A1FB207-E215-441B-9B19-6FA1575946C5}
// *********************************************************************//
  IDeckLinkNotification = interface(IUnknown)
    ['{0A1FB207-E215-441B-9B19-6FA1575946C5}']
    function Subscribe(topic: _BMDNotifications; const theCallback: IDeckLinkNotificationCallback): HResult; stdcall;
    function Unsubscribe(topic: _BMDNotifications; const theCallback: IDeckLinkNotificationCallback): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkNotificationSource
// Flags:     (0)
// GUID:      {2A7320AB-3F9C-4ED1-B364-D17132CDC93D}
// *********************************************************************//
  IDeckLinkNotificationSource = interface(IUnknown)
    ['{2A7320AB-3F9C-4ED1-B364-D17132CDC93D}']
    function PostNotification(topic: _BMDNotifications; param1: Largeuint; param2: Largeuint): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkAttributes
// Flags:     (0)
// GUID:      {ABC11843-D966-44CB-96E2-A1CB5D3135C4}
// *********************************************************************//
  IDeckLinkAttributes = interface(IUnknown)
    ['{ABC11843-D966-44CB-96E2-A1CB5D3135C4}']
    function GetFlag(cfgID: _BMDDeckLinkAttributeID; out value: Integer): HResult; stdcall;
    function GetInt(cfgID: _BMDDeckLinkAttributeID; out value: Int64): HResult; stdcall;
    function GetFloat(cfgID: _BMDDeckLinkAttributeID; out value: Double): HResult; stdcall;
    function GetString(cfgID: _BMDDeckLinkAttributeID; out value: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkStatus
// Flags:     (0)
// GUID:      {5F558200-4028-49BC-BEAC-DB3FA4A96E46}
// *********************************************************************//
  IDeckLinkStatus = interface(IUnknown)
    ['{5F558200-4028-49BC-BEAC-DB3FA4A96E46}']
    function GetFlag(statusID: _BMDDeckLinkStatusID; out value: Integer): HResult; stdcall;
    function GetInt(statusID: _BMDDeckLinkStatusID; out value: Int64): HResult; stdcall;
    function GetFloat(statusID: _BMDDeckLinkStatusID; out value: Double): HResult; stdcall;
    function GetString(statusID: _BMDDeckLinkStatusID; out value: WideString): HResult; stdcall;
    function GetBytes(statusID: _BMDDeckLinkStatusID; buffer: Pointer; var bufferSize: SYSUINT): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkKeyer
// Flags:     (0)
// GUID:      {89AFCAF5-65F8-421E-98F7-96FE5F5BFBA3}
// *********************************************************************//
  IDeckLinkKeyer = interface(IUnknown)
    ['{89AFCAF5-65F8-421E-98F7-96FE5F5BFBA3}']
    function Enable(isExternal: Integer): HResult; stdcall;
    function SetLevel(level: Byte): HResult; stdcall;
    function RampUp(numberOfFrames: SYSUINT): HResult; stdcall;
    function RampDown(numberOfFrames: SYSUINT): HResult; stdcall;
    function Disable: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkVideoConversion
// Flags:     (0)
// GUID:      {3BBCB8A2-DA2C-42D9-B5D8-88083644E99A}
// *********************************************************************//
  IDeckLinkVideoConversion = interface(IUnknown)
    ['{3BBCB8A2-DA2C-42D9-B5D8-88083644E99A}']
    function ConvertFrame(const srcFrame: IDeckLinkVideoFrame; const dstFrame: IDeckLinkVideoFrame): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkDeviceNotificationCallback
// Flags:     (0)
// GUID:      {4997053B-0ADF-4CC8-AC70-7A50C4BE728F}
// *********************************************************************//
  IDeckLinkDeviceNotificationCallback = interface(IUnknown)
    ['{4997053B-0ADF-4CC8-AC70-7A50C4BE728F}']
    function DeckLinkDeviceArrived(const deckLinkDevice: IDeckLink): HResult; stdcall;
    function DeckLinkDeviceRemoved(const deckLinkDevice: IDeckLink): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDeckLinkDiscovery
// Flags:     (0)
// GUID:      {CDBF631C-BC76-45FA-B44D-C55059BC6101}
// *********************************************************************//
  IDeckLinkDiscovery = interface(IUnknown)
    ['{CDBF631C-BC76-45FA-B44D-C55059BC6101}']
    function InstallDeviceNotifications(const deviceNotificationCallback: IDeckLinkDeviceNotificationCallback): HResult; stdcall;
    function UninstallDeviceNotifications: HResult; stdcall;
  end;


(* Coclasses *)
// *********************************************************************//
// The Class CoCDeckLinkIterator provides a Create and CreateRemote method to          
// create instances of the default interface IDeckLinkIterator exposed by              
// the CoClass CDeckLinkIterator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCDeckLinkIterator = class
    class function Create: IDeckLinkIterator;
    class function CreateRemote(const MachineName: string): IDeckLinkIterator;
  end;

// *********************************************************************//
// The Class CoCDeckLinkAPIInformation provides a Create and CreateRemote method to          
// create instances of the default interface IDeckLinkAPIInformation exposed by              
// the CoClass CDeckLinkAPIInformation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCDeckLinkAPIInformation = class
    class function Create: IDeckLinkAPIInformation;
    class function CreateRemote(const MachineName: string): IDeckLinkAPIInformation;
  end;

// *********************************************************************//
// The Class CoCDeckLinkGLScreenPreviewHelper provides a Create and CreateRemote method to          
// create instances of the default interface IDeckLinkGLScreenPreviewHelper exposed by              
// the CoClass CDeckLinkGLScreenPreviewHelper. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCDeckLinkGLScreenPreviewHelper = class
    class function Create: IDeckLinkGLScreenPreviewHelper;
    class function CreateRemote(const MachineName: string): IDeckLinkGLScreenPreviewHelper;
  end;

// *********************************************************************//
// The Class CoCDeckLinkDX9ScreenPreviewHelper provides a Create and CreateRemote method to          
// create instances of the default interface IDeckLinkDX9ScreenPreviewHelper exposed by              
// the CoClass CDeckLinkDX9ScreenPreviewHelper. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCDeckLinkDX9ScreenPreviewHelper = class
    class function Create: IDeckLinkDX9ScreenPreviewHelper;
    class function CreateRemote(const MachineName: string): IDeckLinkDX9ScreenPreviewHelper;
  end;

// *********************************************************************//
// The Class CoCDeckLinkVideoConversion provides a Create and CreateRemote method to          
// create instances of the default interface IDeckLinkVideoConversion exposed by              
// the CoClass CDeckLinkVideoConversion. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCDeckLinkVideoConversion = class
    class function Create: IDeckLinkVideoConversion;
    class function CreateRemote(const MachineName: string): IDeckLinkVideoConversion;
  end;

// *********************************************************************//
// The Class CoCDeckLinkDiscovery provides a Create and CreateRemote method to          
// create instances of the default interface IDeckLinkDiscovery exposed by              
// the CoClass CDeckLinkDiscovery. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCDeckLinkDiscovery = class
    class function Create: IDeckLinkDiscovery;
    class function CreateRemote(const MachineName: string): IDeckLinkDiscovery;
  end;

implementation

uses System.Win.ComObj;

class function CoCDeckLinkIterator.Create: IDeckLinkIterator;
begin
  Result := CreateComObject(CLASS_CDeckLinkIterator) as IDeckLinkIterator;
end;

class function CoCDeckLinkIterator.CreateRemote(const MachineName: string): IDeckLinkIterator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CDeckLinkIterator) as IDeckLinkIterator;
end;

class function CoCDeckLinkAPIInformation.Create: IDeckLinkAPIInformation;
begin
  Result := CreateComObject(CLASS_CDeckLinkAPIInformation) as IDeckLinkAPIInformation;
end;

class function CoCDeckLinkAPIInformation.CreateRemote(const MachineName: string): IDeckLinkAPIInformation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CDeckLinkAPIInformation) as IDeckLinkAPIInformation;
end;

class function CoCDeckLinkGLScreenPreviewHelper.Create: IDeckLinkGLScreenPreviewHelper;
begin
  Result := CreateComObject(CLASS_CDeckLinkGLScreenPreviewHelper) as IDeckLinkGLScreenPreviewHelper;
end;

class function CoCDeckLinkGLScreenPreviewHelper.CreateRemote(const MachineName: string): IDeckLinkGLScreenPreviewHelper;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CDeckLinkGLScreenPreviewHelper) as IDeckLinkGLScreenPreviewHelper;
end;

class function CoCDeckLinkDX9ScreenPreviewHelper.Create: IDeckLinkDX9ScreenPreviewHelper;
begin
  Result := CreateComObject(CLASS_CDeckLinkDX9ScreenPreviewHelper) as IDeckLinkDX9ScreenPreviewHelper;
end;

class function CoCDeckLinkDX9ScreenPreviewHelper.CreateRemote(const MachineName: string): IDeckLinkDX9ScreenPreviewHelper;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CDeckLinkDX9ScreenPreviewHelper) as IDeckLinkDX9ScreenPreviewHelper;
end;

class function CoCDeckLinkVideoConversion.Create: IDeckLinkVideoConversion;
begin
  Result := CreateComObject(CLASS_CDeckLinkVideoConversion) as IDeckLinkVideoConversion;
end;

class function CoCDeckLinkVideoConversion.CreateRemote(const MachineName: string): IDeckLinkVideoConversion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CDeckLinkVideoConversion) as IDeckLinkVideoConversion;
end;

class function CoCDeckLinkDiscovery.Create: IDeckLinkDiscovery;
begin
  Result := CreateComObject(CLASS_CDeckLinkDiscovery) as IDeckLinkDiscovery;
end;

class function CoCDeckLinkDiscovery.CreateRemote(const MachineName: string): IDeckLinkDiscovery;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CDeckLinkDiscovery) as IDeckLinkDiscovery;
end;

end.
